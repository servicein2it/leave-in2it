{"file_contents":{"PRODUCTION_SETUP.md":{"content":"# Production Deployment Setup Guide\n\n## Overview\nThis guide will help you deploy the Leave Management System to production with real Firebase integration.\n\n## Prerequisites\n\n### 1. Firebase Project Setup\n1. Go to [Firebase Console](https://console.firebase.google.com/)\n2. Create a new Firebase project or use existing one\n3. Enable the following services:\n   - **Authentication**: Enable Email/Password provider\n   - **Firestore Database**: Create database in production mode\n   - **Storage**: Enable for profile picture uploads\n\n### 2. Firestore Security Rules\nUpdate your Firestore security rules:\n\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Users collection - only authenticated users can read/write their own data\n    match /users/{userId} {\n      allow read, write: if request.auth != null;\n    }\n    \n    // Leave requests - only authenticated users can read/write their own requests\n    match /leaveRequests/{requestId} {\n      allow read, write: if request.auth != null;\n    }\n    \n    // Admin can read all documents\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n```\n\n### 3. Storage Security Rules\nUpdate your Storage security rules:\n\n```javascript\nrules_version = '2';\nservice firebase.storage {\n  match /b/{bucket}/o {\n    match /{allPaths=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n```\n\n## Environment Variables\n\n### Required Secrets in Replit\nSet these environment variables in your Replit Secrets:\n\n```\nVITE_FIREBASE_API_KEY=your_firebase_api_key\nVITE_FIREBASE_PROJECT_ID=your_firebase_project_id\nVITE_FIREBASE_APP_ID=your_firebase_app_id\nSENDGRID_API_KEY=your_sendgrid_api_key\n```\n\n### How to get Firebase credentials:\n1. Go to Firebase Console > Project Settings\n2. Scroll down to \"Your apps\" section\n3. Select your web app or create one\n4. Copy the config values\n\n## Initial Setup\n\n### 1. Admin User Creation\nThe system automatically creates an admin user when no admin exists:\n- **Username**: admin\n- **Password**: admin\n- **Email**: admin@in2it.co.th\n\n**IMPORTANT**: Change the admin password immediately after first login!\n\n### 2. Employee Setup\nCreate employees through the admin dashboard:\n1. Login as admin\n2. Go to \"จัดการพนักงาน\" (Employee Management)\n3. Click \"เพิ่มพนักงานใหม่\" (Add New Employee)\n4. Fill in employee details including username/password\n\n## Production Checklist\n\n### Security\n- [ ] Change default admin password\n- [ ] Set up proper Firestore security rules\n- [ ] Set up proper Storage security rules\n- [ ] Use environment variables for all secrets\n- [ ] Enable authentication in Firebase\n\n### Email Configuration\n- [ ] Set up SendGrid account\n- [ ] Configure verified sender email\n- [ ] Test email notifications\n- [ ] Update sender email in `server/emailService.ts` (currently set to noreply@in2it.co.th)\n\n### Database\n- [ ] Test user creation and authentication\n- [ ] Test leave request workflow\n- [ ] Test profile picture uploads\n- [ ] Verify data persistence\n\n### Monitoring\n- [ ] Monitor Firebase usage quotas\n- [ ] Monitor SendGrid email limits\n- [ ] Set up error logging\n\n## Post-Deployment\n\n### 1. Test Complete Workflow\n1. Login as admin\n2. Create test employee\n3. Login as employee\n4. Submit leave request\n5. Login as admin and approve/reject\n6. Verify email notification sent\n\n### 2. Backup Strategy\n- Firebase automatically handles backups\n- Consider setting up additional backup using Firebase Admin SDK if needed\n\n### 3. Maintenance\n- Regularly monitor Firebase usage\n- Update Firebase dependencies as needed\n- Monitor email delivery rates\n- Regular security updates\n\n## Troubleshooting\n\n### Common Issues\n\n**Firebase Connection Errors**:\n- Verify environment variables are set correctly\n- Check Firebase project settings\n- Ensure Firestore rules allow access\n\n**Email Not Sending**:\n- Verify SendGrid API key\n- Check sender email verification\n- Monitor SendGrid dashboard for errors\n\n**Authentication Issues**:\n- Ensure Firebase Authentication is enabled\n- Check Firestore security rules\n- Verify user creation in Firebase console\n\n### Support\nFor technical issues, check:\n1. Browser console for JavaScript errors\n2. Firebase console for authentication/database errors\n3. Server logs for backend issues\n4. SendGrid dashboard for email delivery issues\n\n## Scaling Considerations\n\n### Performance\n- Firebase automatically scales\n- Consider implementing pagination for large datasets\n- Optimize Firestore queries\n\n### Costs\n- Monitor Firebase usage (reads/writes/storage)\n- Monitor SendGrid email usage\n- Consider implementing email rate limiting\n\n### Features\n- Add push notifications\n- Implement advanced reporting\n- Add mobile app support\n- Integrate with HR systems\n\n---\n\n**Note**: This system is now production-ready with real Firebase integration. The mock services have been removed and all data is stored in Firebase Firestore.","size_bytes":4983},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Leave Management System\n\n## Overview\nThis is a comprehensive Leave Management System for IN2IT Company, featuring a Thai language interface. It's a full-stack web application with a React frontend and Express backend, designed to manage leave requests, employee administration, and includes role-based authentication. The system aims to streamline leave processes, improve employee management, and provide robust, localized tools for HR operations with high performance.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter\n- **State Management**: React Context API\n- **UI Components**: Shadcn/ui (built on Radix UI)\n- **Styling**: Tailwind CSS with custom CSS variables\n- **Forms**: React Hook Form with Zod validation\n- **Data Fetching**: TanStack Query\n- **Build Tool**: Vite\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM (via Neon Database)\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n\n### Authentication & Authorization\n- **Hybrid System**: Real Firebase Authentication and Firestore, with automatic fallback to mock services if Firebase is unavailable.\n- **Profile Pictures**: Firebase Storage for image uploads.\n- **Role-Based Access Control**: EMPLOYEE and ADMIN roles with distinct permissions.\n- **Protected Routes**: Route-level protection based on user roles.\n\n### Email Notifications\n- **SendGrid Integration**: Professional email notifications for leave approvals/rejections and admin notifications.\n- **Admin Notifications**: Automatic email alerts to poii@in2it.co.th when employees submit leave requests.\n- **Automated Workflow**: Emails sent automatically for status changes and new submissions.\n- **Templates**: Rich HTML templates with Thai language support.\n\n### Key Features\n- **User Management**: Admins have full CRUD on employees; Employees can manage their profiles and leave. Includes profile picture uploads, and enhanced fields like address, social media, and Line User ID.\n- **Leave Management**: Supports 11 specific Thai leave categories with default 0-day balances. Features a workflow: Submit → Pending → Approved/Rejected, with automatic balance deduction upon approval and complete history tracking.\n- **UI/UX Features**: Responsive design (mobile-first), full Thai localization with Buddhist calendar support, print functionality for official forms, and dark mode support.\n\n## External Dependencies\n\n- **Database**: Neon Database (for PostgreSQL)\n- **Authentication/Storage**: Firebase (Authentication, Firestore, Storage)\n- **Email Service**: SendGrid\n- **React Ecosystem**: React, React DOM, Wouter, Radix UI, Lucide React, React Hook Form, TanStack React Query\n- **Styling**: Tailwind CSS, Class Variance Authority\n- **Development Tools**: Vite, ESBuild, TypeScript, TSX, Replit plugins (e.g., Cartographer)","size_bytes":3031},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import { storage } from './storage';\nimport bcrypt from 'bcrypt';\nimport { User } from '../shared/schema';\n\nexport class AuthService {\n  async login(username: string, password: string): Promise<User | null> {\n    try {\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return null;\n      }\n\n      // For demo, we'll use simple password comparison\n      // In production, use bcrypt.compare(password, user.password)\n      if (user.password === password) {\n        return user;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Login error:', error);\n      return null;\n    }\n  }\n\n  async createDefaultAdmin(): Promise<void> {\n    try {\n      const existingAdmin = await storage.getUserByUsername('admin');\n      if (existingAdmin) {\n        console.log('Admin user already exists');\n        return;\n      }\n\n      const adminUser = {\n        username: 'admin',\n        password: 'admin', // In production, hash this\n        role: 'ADMIN',\n        title: 'นาย',\n        nickname: 'Admin',\n        firstName: 'ผู้ดูแล',\n        lastName: 'ระบบ',\n        email: 'admin@in2it.co.th',\n        phone: '02-123-4567',\n        position: 'System Administrator',\n        profilePicture: '',\n        address: '',\n        socialMedia: '',\n        lineUserId: '',\n        gender: 'MALE',\n        leaveBalances: {\n          accumulated: 0,\n          sick: 0,\n          maternity: 0,\n          paternity: 0,\n          personal: 0,\n          vacation: 0,\n          ordination: 0,\n          military: 0,\n          study: 0,\n          international: 0,\n          spouse: 0,\n        },\n      };\n\n      await storage.createUser(adminUser);\n      console.log('Admin user created successfully');\n    } catch (error) {\n      console.error('Error creating admin user:', error);\n    }\n  }\n}\n\nexport const authService = new AuthService();","size_bytes":1898},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":484},"server/emailService.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\n// Define interfaces for email service (avoiding client-side imports)\ninterface UserData {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  title: string;\n}\n\ninterface LeaveRequest {\n  id: string;\n  userId: string;\n  leaveType: string;\n  startDate: Date;\n  endDate: Date;\n  totalDays: number;\n  reason: string;\n}\n\nenum LeaveStatus {\n  PENDING = \"รอพิจารณา\",\n  APPROVED = \"อนุมัติ\",\n  REJECTED = \"ปฏิเสธ\"\n}\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.log('SendGrid API key not configured, skipping email');\n      return false;\n    }\n    \n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text || '',\n      html: params.html,\n    });\n    return true;\n  } catch (error: unknown) {\n    console.error('SendGrid email error:', error);\n    // Log the specific error for debugging\n    if (error && typeof error === 'object' && 'response' in error) {\n      const sendGridError = error as { response?: { body?: unknown } };\n      if (sendGridError.response?.body) {\n        console.error('SendGrid error details:', sendGridError.response.body);\n      }\n    }\n    return false;\n  }\n}\n\nexport function generateLeaveApprovalEmail(\n  employee: UserData,\n  leaveRequest: LeaveRequest,\n  status: LeaveStatus,\n  approver: string\n): EmailParams {\n  const isApproved = status === LeaveStatus.APPROVED;\n  const statusText = isApproved ? 'อนุมัติ' : 'ปฏิเสธ';\n  const statusColor = isApproved ? '#22c55e' : '#ef4444';\n  \n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('th-TH', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      timeZone: 'Asia/Bangkok'\n    }).format(date);\n  };\n\n  const subject = `[IN2IT] คำขอลาของคุณ${statusText}แล้ว - ${leaveRequest.leaveType}`;\n  \n  const html = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${subject}</title>\n  <style>\n    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n    .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px 20px; text-align: center; }\n    .header h1 { margin: 0; font-size: 24px; }\n    .content { padding: 30px 20px; }\n    .status-badge { display: inline-block; padding: 8px 16px; border-radius: 20px; font-weight: bold; margin: 10px 0; }\n    .approved { background-color: #dcfce7; color: #166534; }\n    .rejected { background-color: #fee2e2; color: #991b1b; }\n    .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0; }\n    .info-item { padding: 15px; background: #f8fafc; border-radius: 6px; border-left: 4px solid ${statusColor}; }\n    .info-label { font-weight: bold; color: #475569; margin-bottom: 5px; }\n    .info-value { color: #1e293b; }\n    .rejection-reason { background: #fef2f2; border: 1px solid #fecaca; border-radius: 6px; padding: 15px; margin: 20px 0; }\n    .footer { background: #f8fafc; padding: 20px; text-align: center; border-top: 1px solid #e2e8f0; }\n    .footer p { margin: 0; color: #64748b; font-size: 14px; }\n    @media (max-width: 600px) {\n      .info-grid { grid-template-columns: 1fr; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>🏢 IN2IT Company</h1>\n      <p>ระบบจัดการการลา</p>\n    </div>\n    \n    <div class=\"content\">\n      <h2>สวัสดีคุณ${employee.firstName} ${employee.lastName}</h2>\n      \n      <p>คำขอลาของคุณได้รับการ<span class=\"status-badge ${isApproved ? 'approved' : 'rejected'}\">${statusText}</span>แล้ว</p>\n      \n      <div class=\"info-grid\">\n        <div class=\"info-item\">\n          <div class=\"info-label\">ประเภทการลา</div>\n          <div class=\"info-value\">${leaveRequest.leaveType}</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">จำนวนวัน</div>\n          <div class=\"info-value\">${leaveRequest.totalDays} วัน</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">วันที่เริ่มต้น</div>\n          <div class=\"info-value\">${formatDate(leaveRequest.startDate)}</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">วันที่สิ้นสุด</div>\n          <div class=\"info-value\">${formatDate(leaveRequest.endDate)}</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">เหตุผล</div>\n          <div class=\"info-value\">${leaveRequest.reason}</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">${isApproved ? 'อนุมัติโดย' : 'ปฏิเสธโดย'}</div>\n          <div class=\"info-value\">${approver}</div>\n        </div>\n      </div>\n      \n\n      \n      <p>\n        ${isApproved \n          ? 'คุณสามารถเริ่มลาได้ตามวันที่ที่ระบุในคำขอ หากมีข้อสงสัยกรุณาติดต่อฝ่ายบุคคล'\n          : 'หากมีข้อสงสัยเกี่ยวกับการปฏิเสธคำขอลา กรุณาติดต่อฝ่ายบุคคลหรือผู้บังคับบัญชา'\n        }\n      </p>\n    </div>\n    \n    <div class=\"footer\">\n      <p>© 2025 IN2IT Company - ระบบจัดการการลา</p>\n      <p>อีเมลนี้ถูกส่งโดยอัตโนมัติ กรุณาอย่าตอบกลับ</p>\n    </div>\n  </div>\n</body>\n</html>\n  `;\n\n  const text = `\nสวัสดีคุณ${employee.firstName} ${employee.lastName}\n\nคำขอลาของคุณได้รับการ${statusText}แล้ว\n\nรายละเอียดคำขอลา:\n- ประเภทการลา: ${leaveRequest.leaveType}\n- จำนวนวัน: ${leaveRequest.totalDays} วัน\n- วันที่เริ่มต้น: ${formatDate(leaveRequest.startDate)}\n- วันที่สิ้นสุด: ${formatDate(leaveRequest.endDate)}\n- เหตุผล: ${leaveRequest.reason}\n- ${isApproved ? 'อนุมัติโดย' : 'ปฏิเสธโดย'}: ${approver}\n\n\n\n${isApproved \n  ? 'คุณสามารถเริ่มลาได้ตามวันที่ที่ระบุในคำขอ หากมีข้อสงสัยกรุณาติดต่อฝ่ายบุคคล'\n  : 'หากมีข้อสงสัยเกี่ยวกับการปฏิเสธคำขอลา กรุณาติดต่อฝ่ายบุคคลหรือผู้บังคับบัญชา'\n}\n\nIN2IT Company\nระบบจัดการการลา\n  `;\n\n  return {\n    to: employee.email,\n    from: 'admin@in2it.co.th', // Use verified sender email in SendGrid\n    subject,\n    text,\n    html\n  };\n}\n\nexport async function sendLeaveApprovalNotification(\n  employee: UserData,\n  leaveRequest: LeaveRequest,\n  status: LeaveStatus,\n  approver: string\n): Promise<boolean> {\n  try {\n    const emailParams = generateLeaveApprovalEmail(employee, leaveRequest, status, approver);\n    const success = await sendEmail(emailParams);\n    \n    if (success) {\n      console.log(`Email notification sent to ${employee.email} for leave request ${leaveRequest.id}`);\n    } else {\n      console.error(`Failed to send email notification to ${employee.email}`);\n    }\n    \n    return success;\n  } catch (error) {\n    console.error('Error sending leave approval notification:', error);\n    return false;\n  }\n}\n\nexport function generateAdminNotificationEmail(\n  employee: UserData,\n  leaveRequest: LeaveRequest\n): EmailParams {\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('th-TH', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      timeZone: 'Asia/Bangkok'\n    }).format(date);\n  };\n\n  const subject = `[IN2IT] คำขอลาใหม่ - ${employee.firstName} ${employee.lastName} (${leaveRequest.leaveType})`;\n  \n  const html = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>${subject}</title>\n  <style>\n    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n    .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px 20px; text-align: center; }\n    .header h1 { margin: 0; font-size: 24px; }\n    .content { padding: 30px 20px; }\n    .status-badge { display: inline-block; padding: 8px 16px; border-radius: 20px; font-weight: bold; margin: 10px 0; background-color: #fef3c7; color: #92400e; }\n    .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0; }\n    .info-item { padding: 15px; background: #f8fafc; border-radius: 6px; border-left: 4px solid #3b82f6; }\n    .info-label { font-weight: bold; color: #475569; margin-bottom: 5px; }\n    .info-value { color: #1e293b; }\n    .urgent { background: #fef2f2; border: 1px solid #fecaca; border-radius: 6px; padding: 15px; margin: 20px 0; }\n    .action-buttons { text-align: center; margin: 30px 0; }\n    .button { display: inline-block; padding: 12px 24px; margin: 0 10px; text-decoration: none; border-radius: 6px; font-weight: bold; }\n    .approve-btn { background-color: #22c55e; color: white; }\n    .reject-btn { background-color: #ef4444; color: white; }\n    .footer { background: #f8fafc; padding: 20px; text-align: center; border-top: 1px solid #e2e8f0; }\n    .footer p { margin: 0; color: #64748b; font-size: 14px; }\n    @media (max-width: 600px) {\n      .info-grid { grid-template-columns: 1fr; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>🏢 IN2IT Company</h1>\n      <p>ระบบจัดการการลา - การแจ้งเตือนสำหรับแอดมิน</p>\n    </div>\n    \n    <div class=\"content\">\n      <h2>🔔 คำขอลาใหม่รอการอนุมัติ</h2>\n      \n      <p><strong>${employee.firstName} ${employee.lastName}</strong> (${employee.title}) ได้ส่งคำขอลาใหม่</p>\n      \n      <span class=\"status-badge\">รอพิจารณา</span>\n      \n      <div class=\"info-grid\">\n        <div class=\"info-item\">\n          <div class=\"info-label\">ชื่อพนักงาน</div>\n          <div class=\"info-value\">${employee.firstName} ${employee.lastName}</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">ตำแหน่ง</div>\n          <div class=\"info-value\">${employee.title}</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">ประเภทการลา</div>\n          <div class=\"info-value\">${leaveRequest.leaveType}</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">จำนวนวัน</div>\n          <div class=\"info-value\">${leaveRequest.totalDays} วัน</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">วันที่เริ่มต้น</div>\n          <div class=\"info-value\">${formatDate(leaveRequest.startDate)}</div>\n        </div>\n        <div class=\"info-item\">\n          <div class=\"info-label\">วันที่สิ้นสุด</div>\n          <div class=\"info-value\">${formatDate(leaveRequest.endDate)}</div>\n        </div>\n      </div>\n      \n      <div class=\"info-item\" style=\"grid-column: 1 / -1;\">\n        <div class=\"info-label\">เหตุผลการลา</div>\n        <div class=\"info-value\">${leaveRequest.reason}</div>\n      </div>\n      \n      <div class=\"urgent\">\n        <strong>⚠️ ข้อมุลการติดต่อ:</strong><br>\n        อีเมล: ${employee.email}\n      </div>\n      \n      <p><strong>กรุณาเข้าสู่ระบบเพื่อพิจารณาอนุมัติคำขอลาภายใน 24 ชั่วโมง</strong></p>\n      \n      <p style=\"color: #64748b; font-size: 14px;\">\n        ID คำขอ: ${leaveRequest.id}<br>\n        วันที่ส่งคำขอ: ${formatDate(new Date())}\n      </p>\n    </div>\n    \n    <div class=\"footer\">\n      <p>© 2025 IN2IT Company - ระบบจัดการการลา</p>\n      <p>อีเมลนี้ถูกส่งโดยอัตโนมัติ กรุณาอย่าตอบกลับ</p>\n    </div>\n  </div>\n</body>\n</html>\n  `;\n\n  const text = `\n🔔 คำขอลาใหม่รอการอนุมัติ - IN2IT Company\n\n${employee.firstName} ${employee.lastName} (${employee.title}) ได้ส่งคำขอลาใหม่\n\nรายละเอียดคำขอลา:\n- ชื่อพนักงาน: ${employee.firstName} ${employee.lastName}\n- ตำแหน่ง: ${employee.title}\n- ประเภทการลา: ${leaveRequest.leaveType}\n- จำนวนวัน: ${leaveRequest.totalDays} วัน\n- วันที่เริ่มต้น: ${formatDate(leaveRequest.startDate)}\n- วันที่สิ้นสุด: ${formatDate(leaveRequest.endDate)}\n- เหตุผลการลา: ${leaveRequest.reason}\n\nข้อมูลการติดต่อ:\n- อีเมล: ${employee.email}\n\nกรุณาเข้าสู่ระบบเพื่อพิจารณาอนุมัติคำขอลาภายใน 24 ชั่วโมง\n\nID คำขอ: ${leaveRequest.id}\nวันที่ส่งคำขอ: ${formatDate(new Date())}\n\nIN2IT Company - ระบบจัดการการลา\n  `;\n\n  return {\n    to: 'poii@in2it.co.th', // Admin email\n    from: 'admin@in2it.co.th', // Use verified sender email in SendGrid\n    subject,\n    text,\n    html\n  };\n}\n\nexport async function sendAdminNotification(\n  employee: UserData,\n  leaveRequest: LeaveRequest\n): Promise<boolean> {\n  try {\n    const emailParams = generateAdminNotificationEmail(employee, leaveRequest);\n    const success = await sendEmail(emailParams);\n    \n    if (success) {\n      console.log(`Admin notification email sent for leave request ${leaveRequest.id} by ${employee.firstName} ${employee.lastName}`);\n    } else {\n      console.error(`Failed to send admin notification email for leave request ${leaveRequest.id}`);\n    }\n    \n    return success;\n  } catch (error) {\n    console.error('Error sending admin notification:', error);\n    return false;\n  }\n}","size_bytes":15817},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1953},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authService } from \"./auth\";\nimport { sendLeaveApprovalNotification, sendAdminNotification } from \"./emailService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize admin user\n  await authService.createDefaultAdmin();\n\n  // Auth routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      const user = await authService.login(username, password);\n      \n      if (user) {\n        res.json(user);\n      } else {\n        res.status(401).json({ message: 'Invalid credentials' });\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // User routes\n  app.get('/api/users', async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  app.post('/api/users', async (req, res) => {\n    try {\n      const userData = req.body;\n      \n      // Convert date strings to Date objects\n      if (userData.createdAt) {\n        userData.createdAt = new Date(userData.createdAt);\n      }\n      if (userData.updatedAt) {\n        userData.updatedAt = new Date(userData.updatedAt);\n      }\n      \n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      console.error('Error creating user:', error);\n      res.status(500).json({ message: 'Failed to create user' });\n    }\n  });\n\n  app.put('/api/users/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      // Convert date strings to Date objects\n      if (updates.createdAt) {\n        updates.createdAt = new Date(updates.createdAt);\n      }\n      if (updates.updatedAt) {\n        updates.updatedAt = new Date(updates.updatedAt);\n      }\n      \n      const user = await storage.updateUser(id, updates);\n      res.json(user);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      res.status(500).json({ message: 'Failed to update user' });\n    }\n  });\n\n  app.delete('/api/users/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id);\n      res.json({ message: 'User deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      res.status(500).json({ message: 'Failed to delete user' });\n    }\n  });\n\n  // Get individual user by ID\n  app.get('/api/users/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(id);\n      \n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  });\n\n  // PATCH route for partial user updates (used by profile dashboard)\n  app.patch('/api/users/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      // Convert date strings to Date objects if present\n      if (updates.createdAt) {\n        updates.createdAt = new Date(updates.createdAt);\n      }\n      if (updates.updatedAt) {\n        updates.updatedAt = new Date(updates.updatedAt);\n      }\n      \n      const user = await storage.updateUser(id, updates);\n      res.json(user);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      res.status(500).json({ message: 'Failed to update user' });\n    }\n  });\n\n  // Leave request routes\n  app.get('/api/leave-requests', async (req, res) => {\n    try {\n      const { userId } = req.query;\n      let requests;\n      \n      if (userId) {\n        requests = await storage.getLeaveRequestsByUserId(userId as string);\n      } else {\n        requests = await storage.getAllLeaveRequests();\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      console.error('Error fetching leave requests:', error);\n      res.status(500).json({ message: 'Failed to fetch leave requests' });\n    }\n  });\n\n  app.post('/api/leave-requests', async (req, res) => {\n    try {\n      const requestData = req.body;\n      \n      // Convert date strings to Date objects\n      if (requestData.startDate) {\n        requestData.startDate = new Date(requestData.startDate);\n      }\n      if (requestData.endDate) {\n        requestData.endDate = new Date(requestData.endDate);\n      }\n      if (requestData.requestDate) {\n        requestData.requestDate = new Date(requestData.requestDate);\n      }\n      if (requestData.approvedDate) {\n        requestData.approvedDate = new Date(requestData.approvedDate);\n      }\n      \n      const request = await storage.createLeaveRequest(requestData);\n      \n      // Send admin notification email for new leave request\n      try {\n        const employee = await storage.getUser(request.userId);\n        if (employee) {\n          await sendAdminNotification(employee, request);\n          console.log(`Admin notification sent for new leave request by ${employee.firstName} ${employee.lastName}`);\n        }\n      } catch (emailError) {\n        console.error('Failed to send admin notification email:', emailError);\n        // Don't fail the request creation if email fails\n      }\n      \n      res.json(request);\n    } catch (error) {\n      console.error('Error creating leave request:', error);\n      res.status(500).json({ message: 'Failed to create leave request' });\n    }\n  });\n\n  app.put('/api/leave-requests/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      // Convert date strings to Date objects\n      if (updates.startDate) {\n        updates.startDate = new Date(updates.startDate);\n      }\n      if (updates.endDate) {\n        updates.endDate = new Date(updates.endDate);\n      }\n      if (updates.requestDate) {\n        updates.requestDate = new Date(updates.requestDate);\n      }\n      if (updates.approvedDate) {\n        updates.approvedDate = new Date(updates.approvedDate);\n      }\n      \n      const request = await storage.updateLeaveRequest(id, updates);\n      \n      // Handle leave balance deduction when request is approved\n      if (updates.status === 'อนุมัติ') {\n        try {\n          const user = await storage.getUser(request.userId);\n          if (user) {\n            // Map Thai leave types to balance field names\n            const leaveTypeMap: { [key: string]: keyof typeof user.leaveBalances } = {\n              'วันลาสะสม': 'accumulated',\n              'ลาป่วย': 'sick',\n              'ลาคลอดบุตร': 'maternity',\n              'ลาไปช่วยเหลือภริยาที่คลอดบุตร': 'paternity',\n              'ลากิจส่วนตัว': 'personal',\n              'ลาพักผ่อน': 'vacation',\n              'ลาอุปสมบทหรือการลาไปประกอบพิธีฮัจย์': 'ordination',\n              'ลาเข้ารับการตรวจเลือกทหาร': 'military',\n              'ลาไปศึกษา ฝึกอบรม ปฏิบัติการวิจัย หรือดูงาน': 'study',\n              'ลาไปปฏิบัติงานในองค์การระหว่างประเทศ': 'international',\n              'ลาติดตามคู่สมรส': 'spouse'\n            };\n\n            const balanceField = leaveTypeMap[request.leaveType];\n            if (balanceField) {\n              const currentBalance = user.leaveBalances[balanceField];\n              const newBalance = Math.max(0, currentBalance - request.totalDays);\n              \n              // Update user's leave balance\n              await storage.updateUser(user.id, {\n                leaveBalances: {\n                  ...user.leaveBalances,\n                  [balanceField]: newBalance\n                }\n              });\n              \n              console.log(`Deducted ${request.totalDays} days from ${request.leaveType} balance for user ${user.nickname || user.id}`);\n            }\n          }\n        } catch (balanceError) {\n          console.error('Failed to update leave balance:', balanceError);\n          // Don't fail the request if balance update fails\n        }\n      }\n      \n      // Send email notification if status changed\n      if (updates.status && (updates.status === 'อนุมัติ' || updates.status === 'ปฏิเสธ')) {\n        try {\n          const user = await storage.getUser(request.userId);\n          if (user) {\n            await sendLeaveApprovalNotification(user, request, updates.status, updates.approvedBy || 'แอดมิน');\n            console.log(`Email notification sent to ${user.email} for ${updates.status} leave request ${request.id}`);\n          }\n        } catch (emailError) {\n          console.error('Email notification failed:', emailError);\n          // Don't fail the request if email fails\n        }\n      }\n      \n      res.json(request);\n    } catch (error) {\n      console.error('Error updating leave request:', error);\n      res.status(500).json({ message: 'Failed to update leave request' });\n    }\n  });\n\n  app.delete('/api/leave-requests/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get the leave request first to check its status\n      const existingRequest = await storage.getLeaveRequest(id);\n      if (!existingRequest) {\n        return res.status(404).json({ message: 'Leave request not found' });\n      }\n      \n      // If deleting an approved request, restore the leave balance\n      if (existingRequest.status === 'อนุมัติ') {\n        try {\n          const user = await storage.getUser(existingRequest.userId);\n          if (user) {\n            // Map Thai leave types to balance field names\n            const leaveTypeMap: { [key: string]: keyof typeof user.leaveBalances } = {\n              'วันลาสะสม': 'accumulated',\n              'ลาป่วย': 'sick',\n              'ลาคลอดบุตร': 'maternity',\n              'ลาไปช่วยเหลือภริยาที่คลอดบุตร': 'paternity',\n              'ลากิจส่วนตัว': 'personal',\n              'ลาพักผ่อน': 'vacation',\n              'ลาอุปสมบทหรือการลาไปประกอบพิธีฮัจย์': 'ordination',\n              'ลาเข้ารับการตรวจเลือกทหาร': 'military',\n              'ลาไปศึกษา ฝึกอบรม ปฏิบัติการวิจัย หรือดูงาน': 'study',\n              'ลาไปปฏิบัติงานในองค์การระหว่างประเทศ': 'international',\n              'ลาติดตามคู่สมรส': 'spouse'\n            };\n\n            const balanceField = leaveTypeMap[existingRequest.leaveType];\n            if (balanceField) {\n              const currentBalance = user.leaveBalances[balanceField];\n              const restoredBalance = currentBalance + existingRequest.totalDays;\n              \n              // Restore user's leave balance\n              await storage.updateUser(user.id, {\n                leaveBalances: {\n                  ...user.leaveBalances,\n                  [balanceField]: restoredBalance\n                }\n              });\n              \n              console.log(`Restored ${existingRequest.totalDays} days to ${existingRequest.leaveType} balance for user ${user.nickname || user.id}`);\n            }\n          }\n        } catch (balanceError) {\n          console.error('Failed to restore leave balance:', balanceError);\n          // Continue with deletion even if balance restore fails\n        }\n      }\n      \n      await storage.deleteLeaveRequest(id);\n      res.json({ message: 'Leave request deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting leave request:', error);\n      res.status(500).json({ message: 'Failed to delete leave request' });\n    }\n  });\n\n  // Email notification endpoint\n  app.post('/api/leave-approval-email', async (req, res) => {\n    try {\n      const { employee, leaveRequest, status, approver, rejectionReason } = req.body;\n      \n      await sendLeaveApprovalNotification(\n        employee, \n        leaveRequest, \n        status, \n        approver\n      );\n      \n      res.json({ message: 'Email sent successfully' });\n    } catch (error) {\n      console.error('Email notification error:', error);\n      res.status(500).json({ message: 'Failed to send email notification' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":13198},"server/storage.ts":{"content":"import { users, leaveRequests, type User, type InsertUser, type LeaveRequest, type InsertLeaveRequest } from \"../shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Leave request operations\n  getLeaveRequest(id: string): Promise<LeaveRequest | undefined>;\n  getLeaveRequestsByUserId(userId: string): Promise<LeaveRequest[]>;\n  getAllLeaveRequests(): Promise<LeaveRequest[]>;\n  createLeaveRequest(request: InsertLeaveRequest): Promise<LeaveRequest>;\n  updateLeaveRequest(id: string, updates: Partial<LeaveRequest>): Promise<LeaveRequest>;\n  deleteLeaveRequest(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const userId = uuidv4();\n    const userData = {\n      ...insertUser,\n      id: userId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Leave request operations\n  async getLeaveRequest(id: string): Promise<LeaveRequest | undefined> {\n    const [request] = await db.select().from(leaveRequests).where(eq(leaveRequests.id, id));\n    return request || undefined;\n  }\n\n  async getLeaveRequestsByUserId(userId: string): Promise<LeaveRequest[]> {\n    return await db\n      .select()\n      .from(leaveRequests)\n      .where(eq(leaveRequests.userId, userId))\n      .orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async getAllLeaveRequests(): Promise<LeaveRequest[]> {\n    return await db.select().from(leaveRequests).orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async createLeaveRequest(insertRequest: InsertLeaveRequest): Promise<LeaveRequest> {\n    const requestId = uuidv4();\n    const requestData = {\n      ...insertRequest,\n      id: requestId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    const [request] = await db\n      .insert(leaveRequests)\n      .values(requestData)\n      .returning();\n    return request;\n  }\n\n  async updateLeaveRequest(id: string, updates: Partial<LeaveRequest>): Promise<LeaveRequest> {\n    const [request] = await db\n      .update(leaveRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  async deleteLeaveRequest(id: string): Promise<void> {\n    await db.delete(leaveRequests).where(eq(leaveRequests.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":3741},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, varchar, timestamp, boolean, integer, text, json } from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\n\n// Users table\nexport const users = pgTable('users', {\n  id: varchar('id').primaryKey().notNull(),\n  username: varchar('username').unique().notNull(),\n  password: varchar('password').notNull(),\n  role: varchar('role').notNull(), // 'ADMIN' or 'EMPLOYEE'\n  title: varchar('title').notNull(),\n  nickname: varchar('nickname').notNull(),\n  firstName: varchar('first_name').notNull(),\n  lastName: varchar('last_name').notNull(),\n  email: varchar('email').unique().notNull(),\n  phone: varchar('phone').notNull(),\n  position: varchar('position').notNull(),\n  profilePicture: varchar('profile_picture'),\n  address: text('address'),\n  socialMedia: varchar('social_media'),\n  lineUserId: varchar('line_user_id'),\n  gender: varchar('gender').notNull(), // 'MALE' or 'FEMALE'\n  leaveBalances: json('leave_balances').$type<{\n    accumulated: number;\n    sick: number;\n    maternity: number;\n    paternity: number;\n    personal: number;\n    vacation: number;\n    ordination: number;\n    military: number;\n    study: number;\n    international: number;\n    spouse: number;\n  }>().notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Leave requests table\nexport const leaveRequests = pgTable('leave_requests', {\n  id: varchar('id').primaryKey().notNull(),\n  userId: varchar('user_id').notNull(),\n  employeeName: varchar('employee_name').notNull(),\n  leaveType: varchar('leave_type').notNull(),\n  startDate: timestamp('start_date').notNull(),\n  endDate: timestamp('end_date').notNull(),\n  totalDays: integer('total_days').notNull(),\n  reason: text('reason').notNull(),\n  contactNumber: varchar('contact_number').notNull(),\n  status: varchar('status').notNull(), // 'รอพิจารณา', 'อนุมัติ', 'ปฏิเสธ'\n  requestDate: timestamp('request_date').defaultNow().notNull(),\n  approvedBy: varchar('approved_by'),\n  approvedDate: timestamp('approved_date'),\n  documentUrl: varchar('document_url'), // For sick leave documents\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Sessions table for authentication\nexport const sessions = pgTable('sessions', {\n  sid: varchar('sid').primaryKey(),\n  sess: json('sess').notNull(),\n  expire: timestamp('expire').notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertLeaveRequest = z.infer<typeof insertLeaveRequestSchema>;\nexport type LeaveRequest = typeof leaveRequests.$inferSelect;","size_bytes":3048},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"./context/SimpleAuthContext\";\nimport LoginPage from \"./pages/LoginPage\";\nimport EmployeePage from \"./pages/EmployeePage\";\nimport AdminPage from \"./pages/AdminPage\";\nimport EmployeeManagementPage from \"./pages/EmployeeManagementPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">กำลังโหลด...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={user.role === 'ADMIN' ? AdminPage : EmployeePage} />\n      <Route path=\"/employee\" component={EmployeePage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/admin/employees\" component={EmployeeManagementPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1500},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@import url('https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap');\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 222.2 84% 4.9%;\n  --card: 0 0% 100%;\n  --card-foreground: 222.2 84% 4.9%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 222.2 84% 4.9%;\n  --primary: 217.2 91.2% 59.8%;\n  --primary-foreground: 210 40% 98%;\n  --secondary: 210 40% 96%;\n  --secondary-foreground: 222.2 84% 4.9%;\n  --muted: 210 40% 96%;\n  --muted-foreground: 215.4 16.3% 46.9%;\n  --accent: 210 40% 96%;\n  --accent-foreground: 222.2 84% 4.9%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 210 40% 98%;\n  --border: 214.3 31.8% 91.4%;\n  --input: 214.3 31.8% 91.4%;\n  --ring: 221.2 83.2% 53.3%;\n  --radius: 0.5rem;\n  --chart-1: 12 76% 61%;\n  --chart-2: 173 58% 39%;\n  --chart-3: 197 37% 24%;\n  --chart-4: 43 74% 66%;\n  --chart-5: 27 87% 67%;\n}\n\n.dark {\n  --background: 222.2 84% 4.9%;\n  --foreground: 210 40% 98%;\n  --card: 222.2 84% 4.9%;\n  --card-foreground: 210 40% 98%;\n  --popover: 222.2 84% 4.9%;\n  --popover-foreground: 210 40% 98%;\n  --primary: 210 40% 98%;\n  --primary-foreground: 222.2 84% 4.9%;\n  --secondary: 217.2 32.6% 17.5%;\n  --secondary-foreground: 210 40% 98%;\n  --muted: 217.2 32.6% 17.5%;\n  --muted-foreground: 215 20.2% 65.1%;\n  --accent: 217.2 32.6% 17.5%;\n  --accent-foreground: 210 40% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 210 40% 98%;\n  --border: 217.2 32.6% 17.5%;\n  --input: 217.2 32.6% 17.5%;\n  --ring: 212.7 26.8% 83.9%;\n  --chart-1: 220 70% 50%;\n  --chart-2: 160 60% 45%;\n  --chart-3: 30 80% 55%;\n  --chart-4: 280 65% 60%;\n  --chart-5: 340 75% 55%;\n}\n\n* {\n  border-color: hsl(var(--border));\n}\n\nbody {\n  color: hsl(var(--foreground));\n  background: hsl(var(--background));\n  font-family: 'Kanit', sans-serif;\n}\n\n@layer base {\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Kanit', sans-serif;\n  }\n}\n\n/* React Big Calendar Styles */\n.rbc-calendar {\n  font-family: 'Kanit', sans-serif;\n}\n\n.rbc-month-view {\n  border: 1px solid hsl(var(--border));\n  border-radius: 0.5rem;\n}\n\n.rbc-header {\n  background-color: hsl(var(--muted));\n  border-bottom: 1px solid hsl(var(--border));\n  padding: 0.75rem 0.5rem;\n  font-weight: 500;\n  color: hsl(var(--foreground));\n}\n\n.rbc-date-cell {\n  padding: 0.5rem;\n  border-right: 1px solid hsl(var(--border));\n}\n\n.rbc-day-bg {\n  background-color: hsl(var(--background));\n}\n\n.rbc-today {\n  background-color: hsl(var(--accent));\n}\n\n.rbc-off-range-bg {\n  background-color: hsl(var(--muted));\n}\n\n.rbc-event {\n  border-radius: 0.25rem;\n  padding: 0.125rem 0.25rem;\n  margin: 0.125rem 0;\n  font-size: 0.75rem;\n  font-weight: 500;\n}\n\n.rbc-toolbar {\n  margin-bottom: 1rem;\n  gap: 0.5rem;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.rbc-toolbar button {\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 0.375rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.rbc-toolbar button:hover {\n  background-color: hsl(var(--primary) / 0.9);\n}\n\n.rbc-toolbar button.rbc-active {\n  background-color: hsl(var(--primary));\n}\n\n.rbc-toolbar-label {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: hsl(var(--foreground));\n  margin: 0 1rem;\n}\n\n.rbc-agenda-view {\n  border: 1px solid hsl(var(--border));\n  border-radius: 0.5rem;\n}\n\n.rbc-agenda-table {\n  width: 100%;\n}\n\n.rbc-agenda-table tbody > tr > td {\n  padding: 0.75rem;\n  border-bottom: 1px solid hsl(var(--border));\n}\n\n.rbc-agenda-table .rbc-agenda-time-cell {\n  background-color: hsl(var(--muted));\n  font-weight: 500;\n}\n\n.rbc-show-more {\n  background-color: hsl(var(--secondary));\n  color: hsl(var(--secondary-foreground));\n  border: 1px solid hsl(var(--border));\n  border-radius: 0.25rem;\n  padding: 0.125rem 0.25rem;\n  font-size: 0.75rem;\n  cursor: pointer;\n}\n\n.rbc-show-more:hover {\n  background-color: hsl(var(--secondary) / 0.8);\n}\n\n/* Custom styles for leave status colors */\n.rbc-event.leave-pending {\n  background-color: #f59e0b;\n  border-color: #d97706;\n}\n\n.rbc-event.leave-approved {\n  background-color: #10b981;\n  border-color: #059669;\n}\n\n.rbc-event.leave-rejected {\n  background-color: #ef4444;\n  border-color: #dc2626;\n}\n\n/* Force modal background to be white - Multiple selectors for better coverage */\n[data-radix-dialog-content],\n[data-state=\"open\"][role=\"dialog\"],\n.dialog-content,\ndiv[role=\"dialog\"] {\n  background-color: white !important;\n  color: #1f2937 !important;\n  border: 1px solid #e5e7eb !important;\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important;\n}\n\n/* Ensure dialog overlay is semi-transparent */\n[data-radix-dialog-overlay] {\n  background-color: rgba(0, 0, 0, 0.5) !important;\n}\n\n/* Force text colors in dialog */\n[data-radix-dialog-content] * {\n  color: inherit !important;\n}\n\n[data-radix-dialog-content] .text-gray-700 {\n  color: #374151 !important;\n}\n\n[data-radix-dialog-content] .text-gray-900 {\n  color: #111827 !important;\n}\n\n/* Dark mode support */\n.dark [data-radix-dialog-content] {\n  background-color: #1f2937 !important;\n  color: white !important;\n}\n\n/* Fix Select dropdown styling */\n[data-radix-select-content] {\n  background-color: white !important;\n  border: 1px solid #e5e7eb !important;\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important;\n  border-radius: 6px !important;\n  padding: 4px !important;\n}\n\n[data-radix-select-item] {\n  background-color: white !important;\n  color: #1f2937 !important;\n  padding: 8px 12px !important;\n  border-radius: 4px !important;\n  cursor: pointer !important;\n}\n\n[data-radix-select-item]:hover,\n[data-radix-select-item][data-highlighted] {\n  background-color: #3b82f6 !important;\n  color: white !important;\n}\n\n[data-radix-select-item][data-state=\"checked\"] {\n  background-color: #3b82f6 !important;\n  color: white !important;\n}\n\n[data-radix-select-trigger] {\n  background-color: white !important;\n  border: 1px solid #d1d5db !important;\n  color: #1f2937 !important;\n}\n\n/* Fix Select components with class-based targeting */\n.select-content {\n  background-color: white !important;\n  border: 1px solid #e5e7eb !important;\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1) !important;\n}\n\n.select-item {\n  background-color: white !important;\n  color: #1f2937 !important;\n  padding: 8px 12px !important;\n}\n\n.select-item:hover {\n  background-color: #3b82f6 !important;\n  color: white !important;\n}\n\n/* Enhanced tab styling */\n[data-radix-tabs-trigger][data-state=\"active\"] {\n  background-color: #3b82f6 !important;\n  color: white !important;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important;\n}\n\n[data-radix-tabs-trigger]:hover:not([data-state=\"active\"]) {\n  background-color: #eff6ff !important;\n  color: #1d4ed8 !important;\n}","size_bytes":6893},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/context/SimpleAuthContext.tsx":{"content":"import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { UserData } from '@/types';\nimport { authAPI } from '@/services/api';\n\ninterface AuthContextType {\n  user: UserData | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<UserData | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const savedUser = localStorage.getItem('currentUser');\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user:', error);\n        localStorage.removeItem('currentUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      const userData = await authAPI.login(username, password);\n      if (userData) {\n        setUser(userData);\n        localStorage.setItem('currentUser', JSON.stringify(userData));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('currentUser');\n  };\n\n  const value: AuthContextType = {\n    user,\n    login,\n    logout,\n    loading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","size_bytes":1851},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useContext } from 'react';\nimport { AuthContext } from '@/context/AuthContext';\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","size_bytes":288},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminPage.tsx":{"content":"import { useEffect } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { useLocation } from 'wouter';\nimport { UserRole } from '@/types';\nimport { AdminDashboard } from '@/components/admin/AdminDashboard';\nimport { Loading } from '@/components/ui/loading';\n\nexport default function AdminPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/');\n    } else if (user && user.role !== UserRole.ADMIN) {\n      setLocation('/employee');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  if (!user || user.role !== UserRole.ADMIN) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  return <AdminDashboard />;\n}\n","size_bytes":801},"client/src/pages/EmployeeManagementPage.tsx":{"content":"import { useEffect } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { useLocation } from 'wouter';\nimport { UserRole } from '@/types';\nimport { EmployeeManagement } from '@/components/admin/EmployeeManagement';\nimport { Loading } from '@/components/ui/loading';\n\nexport default function EmployeeManagementPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/');\n    } else if (user && user.role !== UserRole.ADMIN) {\n      setLocation('/employee');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  if (!user || user.role !== UserRole.ADMIN) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  return <EmployeeManagement />;\n}\n","size_bytes":826},"client/src/pages/EmployeePage.tsx":{"content":"import { useEffect } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { useLocation } from 'wouter';\nimport { UserRole } from '@/types';\nimport { EmployeeDashboard } from '@/components/employee/EmployeeDashboard';\nimport { Loading } from '@/components/ui/loading';\n\nexport default function EmployeePage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/');\n    } else if (user && user.role !== UserRole.EMPLOYEE) {\n      setLocation('/admin');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  if (!user || user.role !== UserRole.EMPLOYEE) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  return <EmployeeDashboard />;\n}\n","size_bytes":819},"client/src/pages/LoginPage.tsx":{"content":"import { useEffect } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { useLocation } from 'wouter';\nimport { UserRole } from '@/types';\nimport { LoginForm } from '@/components/auth/LoginForm';\nimport { Loading } from '@/components/ui/loading';\n\nexport default function LoginPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (user && !loading) {\n      // Redirect based on user role\n      if (user.role === UserRole.ADMIN) {\n        setLocation('/admin');\n      } else {\n        setLocation('/employee');\n      }\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  if (user) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  return <LoginForm />;\n}\n","size_bytes":807},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/services/api.ts":{"content":"import { UserData, LeaveRequest } from '@/types';\n\nconst API_BASE = '/api';\n\n// Auth API\nexport const authAPI = {\n  async login(username: string, password: string): Promise<UserData | null> {\n    try {\n      const response = await fetch(`${API_BASE}/auth/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (!response.ok) {\n        return null;\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Login API error:', error);\n      return null;\n    }\n  },\n};\n\n// Users API\nexport const usersAPI = {\n  async getAll(): Promise<UserData[]> {\n    const response = await fetch(`${API_BASE}/users`);\n    if (!response.ok) throw new Error('Failed to fetch users');\n    return response.json();\n  },\n\n  async create(userData: Partial<UserData>): Promise<UserData> {\n    const response = await fetch(`${API_BASE}/users`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData),\n    });\n    if (!response.ok) throw new Error('Failed to create user');\n    return response.json();\n  },\n\n  async update(id: string, updates: Partial<UserData>): Promise<UserData> {\n    const response = await fetch(`${API_BASE}/users/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updates),\n    });\n    if (!response.ok) throw new Error('Failed to update user');\n    return response.json();\n  },\n\n  async delete(id: string): Promise<void> {\n    const response = await fetch(`${API_BASE}/users/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) throw new Error('Failed to delete user');\n  },\n};\n\n// Leave Requests API\nexport const leaveRequestsAPI = {\n  async getAll(): Promise<LeaveRequest[]> {\n    const response = await fetch(`${API_BASE}/leave-requests`);\n    if (!response.ok) throw new Error('Failed to fetch leave requests');\n    return response.json();\n  },\n\n  async getByUserId(userId: string): Promise<LeaveRequest[]> {\n    const response = await fetch(`${API_BASE}/leave-requests?userId=${userId}`);\n    if (!response.ok) throw new Error('Failed to fetch user leave requests');\n    return response.json();\n  },\n\n  async create(requestData: Partial<LeaveRequest>): Promise<LeaveRequest> {\n    const response = await fetch(`${API_BASE}/leave-requests`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(requestData),\n    });\n    if (!response.ok) throw new Error('Failed to create leave request');\n    return response.json();\n  },\n\n  async update(id: string, updates: Partial<LeaveRequest>): Promise<LeaveRequest> {\n    const response = await fetch(`${API_BASE}/leave-requests/${id}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updates),\n    });\n    if (!response.ok) throw new Error('Failed to update leave request');\n    return response.json();\n  },\n\n  async delete(id: string): Promise<void> {\n    const response = await fetch(`${API_BASE}/leave-requests/${id}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) throw new Error('Failed to delete leave request');\n  },\n};","size_bytes":3260},"client/src/types/index.ts":{"content":"export enum Title {\n  NAI = \"นาย\",\n  NANG = \"นาง\", \n  NANGSAO = \"นางสาว\"\n}\n\nexport enum Gender {\n  MALE = \"MALE\",\n  FEMALE = \"FEMALE\"\n}\n\nexport enum LeaveType {\n  ACCUMULATED = \"วันลาสะสม\",\n  SICK = \"ลาป่วย\",\n  MATERNITY = \"ลาคลอดบุตร\",\n  PATERNITY = \"ลาไปช่วยเหลือภริยาที่คลอดบุตร\",\n  PERSONAL = \"ลากิจส่วนตัว\",\n  VACATION = \"ลาพักผ่อน\",\n  ORDINATION = \"ลาอุปสมบทหรือการลาไปประกอบพิธีฮัจย์\",\n  MILITARY = \"ลาเข้ารับการตรวจเลือกทหาร\",\n  STUDY = \"ลาไปศึกษา ฝึกอบรม ปฏิบัติการวิจัย หรือดูงาน\",\n  INTERNATIONAL = \"ลาไปปฏิบัติงานในองค์การระหว่างประเทศ\",\n  SPOUSE = \"ลาติดตามคู่สมรส\"\n}\n\nexport enum LeaveStatus {\n  PENDING = \"รอพิจารณา\",\n  APPROVED = \"อนุมัติ\",\n  REJECTED = \"ปฏิเสธ\"\n}\n\nexport enum UserRole {\n  EMPLOYEE = \"EMPLOYEE\",\n  ADMIN = \"ADMIN\"\n}\n\nexport interface LeaveBalances {\n  accumulated: number;\n  sick: number;\n  maternity: number;\n  paternity: number;\n  personal: number;\n  vacation: number;\n  ordination: number;\n  military: number;\n  study: number;\n  international: number;\n  spouse: number;\n}\n\nexport interface UserData {\n  id: string;\n  username: string;\n  password: string;\n  role: UserRole;\n  title: Title;\n  nickname: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  position: string;\n  profilePicture?: string;\n  address?: string;\n  socialMedia?: string;\n  lineUserId?: string;\n  gender: Gender;\n  leaveBalances: LeaveBalances;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface LeaveRequest {\n  id: string;\n  userId: string;\n  employeeName: string;\n  leaveType: LeaveType;\n  startDate: Date;\n  endDate: Date;\n  totalDays: number;\n  reason: string;\n  contactNumber: string;\n  status: LeaveStatus;\n  requestDate: Date;\n  approvedBy?: string;\n  approvedDate?: Date;\n}\n\nexport interface EmployeeFormData {\n  title: Title;\n  nickname: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  position: string;\n  profilePicture?: string;\n  address?: string;\n  socialMedia?: string;\n  lineUserId?: string;\n  leaveBalances: LeaveBalances;\n}\n\nexport interface AuthContextType {\n  user: UserData | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  loading: boolean;\n}\n","size_bytes":2718},"client/src/utils/dateHelpers.ts":{"content":"// Helper functions for date formatting in Thai Buddhist Era\nexport const formatDateThai = (date: Date | string): string => {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  const buddhistYear = dateObj.getFullYear() + 543;\n  const months = [\n    'ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.',\n    'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'\n  ];\n  \n  const day = dateObj.getDate();\n  const month = months[dateObj.getMonth()];\n  \n  return `${day} ${month} ${buddhistYear}`;\n};\n\nexport const formatDateRangeThai = (startDate: Date | string, endDate: Date | string): string => {\n  const start = formatDateThai(startDate);\n  const end = formatDateThai(endDate);\n  \n  if (start === end) {\n    return start;\n  }\n  \n  return `${start} - ${end}`;\n};\n\nexport const calculateDaysBetween = (startDate: Date | string, endDate: Date | string): number => {\n  const startDateObj = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  const endDateObj = typeof endDate === 'string' ? new Date(endDate) : endDate;\n  const timeDiff = endDateObj.getTime() - startDateObj.getTime();\n  return Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;\n};\n\nexport const getCurrentBuddhistYear = (): number => {\n  return new Date().getFullYear() + 543;\n};\n\nexport const formatDateForInput = (date: Date | string): string => {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return dateObj.toISOString().split('T')[0];\n};\n\nexport const parseInputDate = (dateString: string): Date => {\n  return new Date(dateString);\n};\n\nexport const getThaiMonths = (): { value: number; label: string }[] => {\n  return [\n    { value: 1, label: 'มกราคม' },\n    { value: 2, label: 'กุมภาพันธ์' },\n    { value: 3, label: 'มีนาคม' },\n    { value: 4, label: 'เมษายน' },\n    { value: 5, label: 'พฤษภาคม' },\n    { value: 6, label: 'มิถุนายน' },\n    { value: 7, label: 'กรกฎาคม' },\n    { value: 8, label: 'สิงหาคม' },\n    { value: 9, label: 'กันยายน' },\n    { value: 10, label: 'ตุลาคม' },\n    { value: 11, label: 'พฤศจิกายน' },\n    { value: 12, label: 'ธันวาคม' }\n  ];\n};\n\nexport const getCurrentMonthYear = (): { month: number; year: number } => {\n  const now = new Date();\n  return {\n    month: now.getMonth() + 1, // Convert to 1-based (1-12)\n    year: now.getFullYear() + 543\n  };\n};\n","size_bytes":2519},"client/src/utils/pdfGenerator.ts":{"content":"import { LeaveRequest, UserData, LeaveType } from '@/types';\nimport { formatDateThai } from './dateHelpers';\n\nexport const generatePrintableLeaveForm = (\n  request: LeaveRequest,\n  employee: UserData\n): void => {\n  const printWindow = window.open('', '_blank');\n  \n  if (!printWindow) {\n    alert('กรุณาอนุญาตให้เปิดหน้าต่างใหม่เพื่อพิมพ์ใบลา');\n    return;\n  }\n\n  const htmlContent = `\n    <!DOCTYPE html>\n    <html lang=\"th\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>ใบลา - IN2IT Company</title>\n        <link href=\"https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        <style>\n            * { margin: 0; padding: 0; box-sizing: border-box; }\n            body { font-family: 'Kanit', sans-serif; font-size: 14px; line-height: 1.6; color: #333; background: white; }\n            .container { max-width: 210mm; margin: 0 auto; padding: 20mm; }\n            .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n            .logo { height: 60px; width: auto; }\n            .title { font-size: 24px; font-weight: 700; text-align: center; flex: 1; }\n            .date { text-align: right; font-size: 14px; }\n            .form-section { margin-bottom: 25px; }\n            .form-row { display: flex; margin-bottom: 15px; align-items: center; }\n            .form-label { min-width: 120px; font-weight: 500; }\n            .form-input { flex: 1; border-bottom: 1px solid #333; padding: 5px 10px; margin-left: 10px; }\n            .leave-type-section { margin: 15px 0; }\n            .leave-type-box { border: 2px solid #333; padding: 10px; text-align: center; font-weight: 500; background-color: #f8f9fa; }\n            .signature-section { margin-top: 50px; display: flex; justify-content: space-between; }\n            .signature-box { width: 45%; text-align: center; }\n            .signature-line { border-bottom: 1px solid #333; margin: 40px 0 10px 0; }\n            .approval-section { margin-top: 20px; text-align: left; }\n            .approval-options { display: flex; gap: 20px; margin-top: 10px; }\n            .approval-checkbox { width: 15px; height: 15px; border: 1px solid #333; display: inline-block; margin-right: 10px; }\n            @media print {\n                .container { padding: 15mm; }\n                body { -webkit-print-color-adjust: exact; }\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <img src=\"https://in2it-service.com/IN2IT/logo/in2it-logo.png\" alt=\"IN2IT Company\" class=\"logo\">\n                <div class=\"title\">ใบลา</div>\n                <div class=\"date\">วันที่ ${formatDateThai(request.requestDate)}</div>\n            </div>\n            \n            <div class=\"form-section\">\n                <div class=\"form-row\">\n                    <span class=\"form-label\">ข้าพเจ้า</span>\n                    <span class=\"form-input\">${employee.title}${employee.firstName} ${employee.lastName}</span>\n                </div>\n                <div class=\"form-row\">\n                    <span class=\"form-label\">ตำแหน่ง</span>\n                    <span class=\"form-input\">${employee.position}</span>\n                </div>\n            </div>\n            \n            <div class=\"form-section\">\n                <div style=\"margin-bottom: 15px;\">\n                    <strong>ขอลา:</strong>\n                </div>\n                <div class=\"leave-type-section\">\n                    <div class=\"leave-type-box\">\n                        ${request.leaveType}\n                    </div>\n                </div>\n                <div class=\"form-row\">\n                    <span class=\"form-label\">เหตุผล</span>\n                    <span class=\"form-input\">${request.reason}</span>\n                </div>\n            </div>\n            \n            <div class=\"form-section\">\n                <div class=\"form-row\">\n                    <span class=\"form-label\">ตั้งแต่วันที่</span>\n                    <span class=\"form-input\">${formatDateThai(request.startDate)}</span>\n                    <span class=\"form-label\" style=\"margin-left: 20px;\">ถึงวันที่</span>\n                    <span class=\"form-input\">${formatDateThai(request.endDate)}</span>\n                </div>\n                <div class=\"form-row\">\n                    <span class=\"form-label\">รวม</span>\n                    <span class=\"form-input\">${request.totalDays} วัน</span>\n                </div>\n                <div class=\"form-row\">\n                    <span class=\"form-label\">เบอร์โทรติดต่อ</span>\n                    <span class=\"form-input\">${request.contactNumber}</span>\n                </div>\n            </div>\n            \n            <div class=\"signature-section\">\n                <div class=\"signature-box\">\n                    <div class=\"signature-line\"></div>\n                    <div>ลายเซ็นผู้ขอลา</div>\n                    <div style=\"margin-top: 10px;\">( ${employee.title}${employee.firstName} ${employee.lastName} )</div>\n                </div>\n                <div class=\"signature-box\">\n                    <div class=\"signature-line\"></div>\n                    <div>ลายเซ็นผู้อนุมัติ</div>\n                    <div style=\"margin-top: 10px;\">( ............................. )</div>\n                    <div class=\"approval-section\">\n                        <strong>ความเห็น:</strong>\n                        <div class=\"approval-options\">\n                            <div>\n                                <span class=\"approval-checkbox\"></span>\n                                <span>อนุมัติ</span>\n                            </div>\n                            <div>\n                                <span class=\"approval-checkbox\"></span>\n                                <span>ไม่อนุมัติ</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n\n  printWindow.document.write(htmlContent);\n  printWindow.document.close();\n  printWindow.focus();\n};\n","size_bytes":6569},"client/src/components/admin/AdminDashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { UserData, LeaveRequest, LeaveStatus } from '@/types';\nimport { leaveRequestsAPI, usersAPI } from '@/services/api';\nimport { Header } from '@/components/layout/Header';\nimport { EmployeeCard } from './EmployeeCard';\nimport { AllLeaveRequests } from './AllLeaveRequests';\nimport { EmployeeLeaveView } from './EmployeeLeaveView';\nimport { CalendarView } from '../shared/CalendarView';\nimport { LeaveRequestModal } from '../shared/LeaveRequestModal';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Loading } from '@/components/ui/loading';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nexport const AdminDashboard: React.FC = () => {\n  const [, setLocation] = useLocation();\n  const [employees, setEmployees] = useState<UserData[]>([]);\n  const [pendingRequestsCount, setPendingRequestsCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [viewingEmployeeId, setViewingEmployeeId] = useState<string | null>(null);\n  const [allLeaveRequests, setAllLeaveRequests] = useState<LeaveRequest[]>([]);\n  const [selectedRequest, setSelectedRequest] = useState<LeaveRequest | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const loadDashboardData = async () => {\n    try {\n      const [allUsers, allRequests] = await Promise.all([\n        usersAPI.getAll(),\n        leaveRequestsAPI.getAll()\n      ]);\n\n      const employeeUsers = allUsers.filter(u => u.role === 'EMPLOYEE');\n      const pendingRequests = allRequests.filter(r => r.status === LeaveStatus.PENDING);\n      \n      setEmployees(employeeUsers);\n      setAllLeaveRequests(allRequests);\n      setPendingRequestsCount(pendingRequests.length);\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card \n            className=\"shadow-sm hover:shadow-md transition-shadow duration-200 cursor-pointer\"\n            onClick={() => setLocation('/admin/employees')}\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-primary/10 rounded-full\">\n                  <i className=\"fas fa-users text-primary text-xl\"></i>\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"font-semibold text-gray-800\">จัดการพนักงาน</h3>\n                  <p className=\"text-sm text-gray-600\">เพิ่ม แก้ไข ลบข้อมูลพนักงาน</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-green-100 rounded-full\">\n                  <i className=\"fas fa-calendar-check text-green-600 text-xl\"></i>\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"font-semibold text-gray-800\">คำขอรอพิจารณา</h3>\n                  <p className=\"text-2xl font-bold text-green-600\">{pendingRequestsCount}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-blue-100 rounded-full\">\n                  <i className=\"fas fa-chart-line text-blue-600 text-xl\"></i>\n                </div>\n                <div className=\"ml-4\">\n                  <h3 className=\"font-semibold text-gray-800\">พนักงานทั้งหมด</h3>\n                  <p className=\"text-2xl font-bold text-blue-600\">{employees.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Employee Quick Access */}\n        <Card className=\"shadow-sm mb-8\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-6\">พนักงานในระบบ</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {employees.length === 0 ? (\n                <div className=\"col-span-full text-center py-8 text-gray-500\">\n                  ไม่มีพนักงานในระบบ\n                </div>\n              ) : (\n                employees.map((employee) => (\n                  <EmployeeCard \n                    key={employee.id} \n                    employee={employee}\n                    onClick={() => setViewingEmployeeId(employee.id)}\n                  />\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Leave Requests Management */}\n        <Tabs defaultValue=\"list\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"list\">รายการคำขอ</TabsTrigger>\n            <TabsTrigger value=\"calendar\">ปฏิทินการลา</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"list\" className=\"space-y-4\">\n            <AllLeaveRequests />\n          </TabsContent>\n          \n          <TabsContent value=\"calendar\" className=\"space-y-4\">\n            <CalendarView \n              leaveRequests={allLeaveRequests}\n              isAdmin={true}\n              onEventClick={(event) => {\n                setSelectedRequest(event.resource);\n                setIsModalOpen(true);\n              }}\n            />\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Employee Leave View */}\n      <EmployeeLeaveView\n        employeeId={viewingEmployeeId}\n        onClose={() => setViewingEmployeeId(null)}\n      />\n\n      {/* Leave Request Modal */}\n      <LeaveRequestModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false);\n          setSelectedRequest(null);\n        }}\n        request={selectedRequest}\n        employee={selectedRequest ? employees.find(emp => emp.id === selectedRequest.userId) : null}\n        showActions={true}\n        onApprove={() => {\n          setIsModalOpen(false);\n          setSelectedRequest(null);\n          loadDashboardData();\n        }}\n        onReject={() => {\n          setIsModalOpen(false);\n          setSelectedRequest(null);\n          loadDashboardData();\n        }}\n        onDelete={() => {\n          setIsModalOpen(false);\n          setSelectedRequest(null);\n          loadDashboardData();\n        }}\n      />\n    </div>\n  );\n};\n","size_bytes":7136},"client/src/components/admin/AllLeaveRequests.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { LeaveRequest, LeaveStatus, UserData } from '@/types';\nimport { leaveRequestsAPI, usersAPI } from '@/services/api';\nimport { formatDateThai, getThaiMonths, getCurrentMonthYear } from '@/utils/dateHelpers';\nimport { generatePrintableLeaveForm } from '@/utils/pdfGenerator';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Loading } from '@/components/ui/loading';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport const AllLeaveRequests: React.FC = () => {\n  const { toast } = useToast();\n  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([]);\n  const [employees, setEmployees] = useState<UserData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [selectedYear, setSelectedYear] = useState('');\n\n  const currentMonthYear = getCurrentMonthYear();\n  const thaiMonths = getThaiMonths();\n\n  useEffect(() => {\n    setSelectedMonth(currentMonthYear.month.toString());\n    setSelectedYear(currentMonthYear.year.toString());\n  }, []);\n\n  useEffect(() => {\n    if (selectedMonth && selectedYear) {\n      loadLeaveRequests();\n    }\n  }, [selectedMonth, selectedYear]);\n\n  useEffect(() => {\n    loadEmployees();\n  }, []);\n\n  // Email notifications are now handled automatically by the backend when updating leave requests\n\n  const loadEmployees = async () => {\n    try {\n      const allUsers = await usersAPI.getAll();\n      setEmployees(allUsers);\n    } catch (error) {\n      console.error('Error loading employees:', error);\n    }\n  };\n\n  const loadLeaveRequests = async () => {\n    try {\n      const requests = await leaveRequestsAPI.getAll();\n      \n      // If no month/year selected, show all requests\n      if (!selectedMonth || !selectedYear) {\n        setLeaveRequests(requests.sort((a, b) => new Date(b.requestDate).getTime() - new Date(a.requestDate).getTime()));\n        return;\n      }\n      \n      // Filter requests by selected month and year\n      const filteredRequests = requests.filter(request => {\n        const requestDate = new Date(request.requestDate);\n        const requestMonth = requestDate.getMonth() + 1; // getMonth() returns 0-11, so add 1\n        const requestYear = requestDate.getFullYear() + 543; // Convert to Buddhist year\n        \n        const selectedMonthNum = parseInt(selectedMonth);\n        const selectedYearNum = parseInt(selectedYear);\n        \n        return requestMonth === selectedMonthNum && requestYear === selectedYearNum;\n      });\n      setLeaveRequests(filteredRequests.sort((a, b) => new Date(b.requestDate).getTime() - new Date(a.requestDate).getTime()));\n    } catch (error) {\n      console.error('Error loading leave requests:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApproveRequest = async (requestId: string) => {\n    try {\n      // Find the leave request before updating\n      const leaveRequest = leaveRequests.find(req => req.id === requestId);\n      if (!leaveRequest) {\n        throw new Error('Leave request not found');\n      }\n\n      await leaveRequestsAPI.update(requestId, {\n        status: LeaveStatus.APPROVED,\n        approvedDate: new Date()\n      });\n\n      toast({\n        title: \"อนุมัติคำขอลาสำเร็จ\",\n        description: \"คำขอลาได้รับการอนุมัติและหักวันลาเรียบร้อยแล้ว\",\n      });\n\n      // Email notification is handled automatically by the backend\n\n      loadLeaveRequests();\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถอนุมัติคำขอลาได้ กรุณาลองใหม่อีกครั้ง\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRejectRequest = async (requestId: string) => {\n    if (!confirm('คุณแน่ใจหรือไม่ที่จะปฏิเสธคำขอลานี้?')) {\n      return;\n    }\n\n    try {\n      await leaveRequestsAPI.update(requestId, {\n        status: LeaveStatus.REJECTED,\n        approvedDate: new Date()\n      });\n\n      toast({\n        title: \"ปฏิเสธคำขอลาสำเร็จ\",\n        description: \"คำขอลาได้รับการปฏิเสธเรียบร้อยแล้ว\",\n      });\n\n      loadLeaveRequests();\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถปฏิเสธคำขอลาได้ กรุณาลองใหม่อีกครั้ง\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteRequest = async (requestId: string, status?: LeaveStatus) => {\n    const isApproved = status === LeaveStatus.APPROVED;\n    const confirmMessage = isApproved \n      ? 'คุณต้องการลบคำขอลาที่อนุมัติแล้วใช่หรือไม่?\\n\\n⚠️ การลบจะคืนวันลาให้พนักงานโดยอัตโนมัติ'\n      : 'คุณต้องการลบคำขอลานี้ใช่หรือไม่?';\n      \n    if (window.confirm(confirmMessage)) {\n      try {\n        await leaveRequestsAPI.delete(requestId);\n\n        const successMessage = isApproved \n          ? \"คำขอลาถูกลบและคืนวันลาให้พนักงานเรียบร้อยแล้ว\"\n          : \"คำขอลาถูกลบออกจากระบบเรียบร้อยแล้ว\";\n          \n        toast({\n          title: \"ลบคำขอลาสำเร็จ\",\n          description: successMessage,\n        });\n\n        loadLeaveRequests();\n      } catch (error) {\n        console.error('Error deleting leave request:', error);\n        let description = 'ไม่สามารถลบคำขอลาได้ กรุณาลองใหม่อีกครั้ง';\n        \n        if (error instanceof Error && error.message.includes('400:')) {\n          // Extract the actual error message from the API response\n          const match = error.message.match(/400: (.+)/);\n          if (match) {\n            description = match[1];\n          } else if (error.message.includes('approved leave request') || error.message.includes('อนุมัติแล้ว')) {\n            description = 'ไม่สามารถลบคำขอลาที่ได้รับการอนุมัติแล้ว เนื่องจากได้มีการหักวันลาแล้ว';\n          }\n        }\n        \n        toast({\n          title: \"เกิดข้อผิดพลาด\",\n          description,\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handlePrintLeaveForm = (request: LeaveRequest) => {\n    const employee = employees.find(e => e.id === request.userId);\n    if (employee) {\n      generatePrintableLeaveForm(request, employee);\n    }\n  };\n\n  const getStatusBadge = (status: LeaveStatus) => {\n    switch (status) {\n      case LeaveStatus.APPROVED:\n        return <Badge className=\"bg-green-100 text-green-800\">อนุมัติ</Badge>;\n      case LeaveStatus.REJECTED:\n        return <Badge className=\"bg-red-100 text-red-800\">ปฏิเสธ</Badge>;\n      case LeaveStatus.PENDING:\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">รอพิจารณา</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">{status}</Badge>;\n    }\n  };\n\n  const getEmployee = (userId: string) => {\n    return employees.find(e => e.id === userId);\n  };\n\n  const getEmployeeAvatarColor = (userId: string) => {\n    const employee = getEmployee(userId);\n    if (!employee) return 'bg-gray-500';\n    return employee.gender === 'MALE' ? 'bg-indigo-500' : 'bg-sky-500';\n  };\n\n  const getEmployeeInitials = (userId: string) => {\n    const employee = getEmployee(userId);\n    if (!employee) return '?';\n    return employee.nickname.charAt(0);\n  };\n\n  if (loading) {\n    return <Loading className=\"h-32\" />;\n  }\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle className=\"text-xl font-semibold text-gray-800\">\n            คำขอลาทั้งหมด\n          </CardTitle>\n          <div className=\"flex space-x-4\">\n            <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"เลือกเดือน\" />\n              </SelectTrigger>\n              <SelectContent>\n                {thaiMonths.map((month) => (\n                  <SelectItem key={month.value} value={month.value.toString()}>\n                    {month.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={selectedYear} onValueChange={setSelectedYear}>\n              <SelectTrigger className=\"w-24\">\n                <SelectValue placeholder=\"ปี\" />\n              </SelectTrigger>\n              <SelectContent>\n                {Array.from({ length: 5 }, (_, i) => {\n                  const year = currentMonthYear.year - 2 + i;\n                  return (\n                    <SelectItem key={year} value={year.toString()}>\n                      {year}\n                    </SelectItem>\n                  );\n                })}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-gray-200\">\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">พนักงาน</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">ประเภท</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">วันที่ลา</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">จำนวนวัน</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">สถานะ</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">การจัดการ</th>\n              </tr>\n            </thead>\n            <tbody>\n              {leaveRequests.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8 text-gray-500\">\n                    ไม่มีคำขอลาในเดือนที่เลือก\n                  </td>\n                </tr>\n              ) : (\n                leaveRequests.map((request) => (\n                  <tr key={request.id} className=\"border-b border-gray-100\">\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        {(() => {\n                          const employee = getEmployee(request.userId);\n                          const hasProfilePicture = employee?.profilePicture && employee.profilePicture.trim() !== '';\n                          \n                          if (hasProfilePicture) {\n                            return (\n                              <img\n                                src={employee.profilePicture}\n                                alt={employee.nickname}\n                                className=\"w-8 h-8 rounded-full object-cover border border-gray-200\"\n                              />\n                            );\n                          } else {\n                            return (\n                              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${getEmployeeAvatarColor(request.userId)}`}>\n                                <span className=\"text-white text-sm font-medium\">\n                                  {getEmployeeInitials(request.userId)}\n                                </span>\n                              </div>\n                            );\n                          }\n                        })()}\n                        <span className=\"text-gray-700 font-medium\">\n                          {request.employeeName}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-gray-600\">{request.leaveType}</td>\n                    <td className=\"py-3 px-4 text-gray-600\">\n                      {formatDateThai(request.startDate)} - {formatDateThai(request.endDate)}\n                    </td>\n                    <td className=\"py-3 px-4 text-gray-600\">{request.totalDays}</td>\n                    <td className=\"py-3 px-4\">\n                      {getStatusBadge(request.status)}\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex space-x-2\">\n                        {request.status === LeaveStatus.PENDING ? (\n                          <>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleApproveRequest(request.id)}\n                              className=\"text-green-600 hover:text-green-800\"\n                            >\n                              <i className=\"fas fa-check mr-1\"></i>\n                              อนุมัติ\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleRejectRequest(request.id)}\n                              className=\"text-red-600 hover:text-red-800\"\n                            >\n                              <i className=\"fas fa-times mr-1\"></i>\n                              ปฏิเสธ\n                            </Button>\n                          </>\n                        ) : (\n                          <>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handlePrintLeaveForm(request)}\n                              disabled={request.status === LeaveStatus.PENDING || request.status === LeaveStatus.REJECTED}\n                              className=\"text-primary hover:text-primary/80\"\n                            >\n                              <i className=\"fas fa-print mr-1\"></i>\n                              พิมพ์\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteRequest(request.id, request.status)}\n                              className=\"text-red-600 hover:text-red-800\"\n                            >\n                              <i className=\"fas fa-trash mr-1\"></i>\n                              ลบ\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":15929},"client/src/components/admin/EmployeeCard.tsx":{"content":"import { UserData, Gender } from '@/types';\n\ninterface EmployeeCardProps {\n  employee: UserData;\n  onClick?: () => void;\n}\n\nexport const EmployeeCard: React.FC<EmployeeCardProps> = ({ employee, onClick }) => {\n  const getAvatarColor = (gender: Gender) => {\n    return gender === Gender.MALE ? 'bg-indigo-500' : 'bg-sky-500';\n  };\n\n  const getInitials = (nickname: string) => {\n    return nickname.substring(0, 2);\n  };\n\n  return (\n    <div \n      className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow duration-200 cursor-pointer\"\n      onClick={onClick}\n    >\n      <div className=\"flex items-center space-x-3\">\n        {employee.profilePicture ? (\n          <img \n            src={employee.profilePicture} \n            alt={employee.nickname || employee.firstName} \n            className=\"w-12 h-12 rounded-full object-cover border-2 border-gray-200 shadow-sm\"\n          />\n        ) : (\n          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getAvatarColor(employee.gender)}`}>\n            <span className=\"text-white font-medium\">\n              {getInitials(employee.nickname)}\n            </span>\n          </div>\n        )}\n        <div>\n          <p className=\"font-medium text-gray-800\">{employee.nickname}</p>\n          <p className=\"text-sm text-gray-600\">{employee.position}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","size_bytes":1395},"client/src/components/admin/EmployeeLeaveView.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { UserData, LeaveRequest, LeaveStatus } from '@/types';\nimport { leaveRequestsAPI, usersAPI } from '@/services/api';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Loading } from '@/components/ui/loading';\nimport { formatDateRangeThai } from '@/utils/dateHelpers';\nimport { ArrowLeft, Calendar, Clock, User, FileText } from 'lucide-react';\n\ninterface EmployeeLeaveViewProps {\n  employeeId: string | null;\n  onClose: () => void;\n}\n\nexport const EmployeeLeaveView: React.FC<EmployeeLeaveViewProps> = ({ employeeId, onClose }) => {\n  const [employee, setEmployee] = useState<UserData | null>(null);\n  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (employeeId) {\n      loadEmployeeData();\n    }\n  }, [employeeId]);\n\n  const loadEmployeeData = async () => {\n    if (!employeeId) return;\n    \n    try {\n      setLoading(true);\n      \n      // Load employee details\n      const users = await usersAPI.getAll();\n      const employeeData = users.find(u => u.id === employeeId);\n      setEmployee(employeeData || null);\n\n      // Load leave requests for this employee\n      const allRequests = await leaveRequestsAPI.getByUserId(employeeId);\n      setLeaveRequests(allRequests);\n    } catch (error) {\n      console.error('Error loading employee data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadge = (status: LeaveStatus) => {\n    switch (status) {\n      case LeaveStatus.PENDING:\n        return <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\">รอพิจารณา</Badge>;\n      case LeaveStatus.APPROVED:\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">อนุมัติ</Badge>;\n      case LeaveStatus.REJECTED:\n        return <Badge variant=\"outline\" className=\"bg-red-50 text-red-700 border-red-200\">ปฏิเสธ</Badge>;\n      default:\n        return <Badge variant=\"outline\">ไม่ทราบ</Badge>;\n    }\n  };\n\n  if (!employeeId) return null;\n\n  return (\n    <Dialog open={!!employeeId} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <User className=\"h-5 w-5\" />\n            รายการขอลาของพนักงาน\n          </DialogTitle>\n          <DialogDescription>\n            ดูข้อมูลและประวัติการลาของพนักงาน\n          </DialogDescription>\n        </DialogHeader>\n\n        {loading ? (\n          <Loading className=\"h-64\" />\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Employee Info */}\n            {employee && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">ข้อมูลพนักงาน</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center gap-4\">\n                    {employee.profilePicture ? (\n                      <img \n                        src={employee.profilePicture} \n                        alt={employee.nickname || employee.firstName} \n                        className=\"w-16 h-16 rounded-full object-cover border-2 border-gray-200\"\n                      />\n                    ) : (\n                      <div className=\"w-16 h-16 rounded-full bg-gray-300 flex items-center justify-center\">\n                        <span className=\"text-white text-lg font-medium\">\n                          {employee.nickname?.charAt(0)}\n                        </span>\n                      </div>\n                    )}\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">{employee.nickname}</h3>\n                      <p className=\"text-gray-600\">{employee.title}{employee.firstName} {employee.lastName}</p>\n                      <p className=\"text-gray-500\">{employee.position}</p>\n                      <p className=\"text-sm text-gray-500\">@{employee.username}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Leave Balance Summary */}\n            {employee && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    สรุปยอดวันลาคงเหลือ\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    {Object.entries(employee.leaveBalances).map(([key, value]) => {\n                      const labels: Record<string, string> = {\n                        accumulated: 'วันลาสะสม',\n                        sick: 'ลาป่วย',\n                        maternity: 'ลาคลอดบุตร',\n                        paternity: 'ลาช่วยภริยาคลอด',\n                        personal: 'ลากิจส่วนตัว',\n                        vacation: 'ลาพักผ่อน',\n                        ordination: 'ลาอุปสมบท',\n                        military: 'ลาตรวจเลือกทหาร',\n                        study: 'ลาศึกษา',\n                        international: 'ลาต่างประเทศ',\n                        spouse: 'ลาติดตามคู่สมรส'\n                      };\n                      \n                      return (\n                        <div key={key} className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"text-2xl font-bold text-blue-600\">{value}</div>\n                          <div className=\"text-sm text-gray-600\">{labels[key] || key}</div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Leave Requests */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  ประวัติการขอลา ({leaveRequests.length} รายการ)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {leaveRequests.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    ยังไม่มีการขอลา\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {leaveRequests\n                      .sort((a, b) => new Date(b.requestDate).getTime() - new Date(a.requestDate).getTime())\n                      .map((request) => (\n                        <div key={request.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow\">\n                          <div className=\"flex justify-between items-start mb-3\">\n                            <div>\n                              <h4 className=\"font-medium text-gray-900\">{request.leaveType}</h4>\n                              <div className=\"flex items-center gap-2 text-sm text-gray-600 mt-1\">\n                                <Calendar className=\"h-4 w-4\" />\n                                {formatDateRangeThai(request.startDate, request.endDate)}\n                                <span className=\"text-gray-400\">•</span>\n                                <Clock className=\"h-4 w-4\" />\n                                {request.totalDays} วัน\n                              </div>\n                            </div>\n                            {getStatusBadge(request.status)}\n                          </div>\n                          \n                          {request.reason && (\n                            <div className=\"mb-3\">\n                              <p className=\"text-sm font-medium text-gray-700\">เหตุผล:</p>\n                              <p className=\"text-sm text-gray-600\">{request.reason}</p>\n                            </div>\n                          )}\n                          \n                          <div className=\"text-xs text-gray-500\">\n                            ยื่นคำขอเมื่อ: {new Date(request.requestDate).toLocaleDateString('th-TH')}\n                            {request.contactNumber && (\n                              <>\n                                <span className=\"mx-2\">•</span>\n                                ติดต่อ: {request.contactNumber}\n                              </>\n                            )}\n                          </div>\n                          \n\n                        </div>\n                      ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":9643},"client/src/components/admin/EmployeeManagement.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { UserData, UserRole, Gender } from '@/types';\nimport { usersAPI } from '@/services/api';\nimport { EmployeeModal } from './EmployeeModal';\nimport { EmployeeLeaveView } from './EmployeeLeaveView';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Loading } from '@/components/ui/loading';\nimport { useToast } from '@/hooks/use-toast';\n\nexport const EmployeeManagement: React.FC = () => {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [employees, setEmployees] = useState<UserData[]>([]);\n  const [filteredEmployees, setFilteredEmployees] = useState<UserData[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n  const [editingEmployee, setEditingEmployee] = useState<UserData | null>(null);\n  const [viewingEmployeeId, setViewingEmployeeId] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadEmployees();\n  }, []);\n\n  useEffect(() => {\n    filterEmployees();\n  }, [employees, searchTerm]);\n\n  const loadEmployees = async () => {\n    try {\n      const allUsers = await usersAPI.getAll();\n      const employeeUsers = allUsers.filter(u => u.role === UserRole.EMPLOYEE);\n      setEmployees(employeeUsers);\n    } catch (error) {\n      console.error('Error loading employees:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterEmployees = () => {\n    if (!searchTerm) {\n      setFilteredEmployees(employees);\n      return;\n    }\n\n    const filtered = employees.filter(employee =>\n      employee.nickname.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.position.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    setFilteredEmployees(filtered);\n  };\n\n  const handleAddEmployee = () => {\n    setEditingEmployee(null);\n    setShowModal(true);\n  };\n\n  const handleEditEmployee = (employee: UserData) => {\n    setEditingEmployee(employee);\n    setShowModal(true);\n  };\n\n  const handleDeleteEmployee = async (employeeId: string) => {\n    if (window.confirm('คุณต้องการลบพนักงานคนนี้ใช่หรือไม่?')) {\n      try {\n        await usersAPI.delete(employeeId);\n        toast({\n          title: \"ลบพนักงานสำเร็จ\",\n          description: \"ข้อมูลพนักงานถูกลบออกจากระบบเรียบร้อยแล้ว\",\n        });\n        loadEmployees();\n      } catch (error) {\n        toast({\n          title: \"เกิดข้อผิดพลาด\",\n          description: \"ไม่สามารถลบพนักงานได้ กรุณาลองใหม่อีกครั้ง\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleResetPassword = async (employeeId: string) => {\n    if (window.confirm('คุณต้องการรีเซ็ตรหัสผ่านเป็น \"123456\" ใช่หรือไม่?')) {\n      try {\n        await usersAPI.update(employeeId, { password: '123456' });\n        toast({\n          title: \"รีเซ็ตรหัสผ่านสำเร็จ\",\n          description: \"รหัสผ่านถูกเปลี่ยนเป็น '123456' เรียบร้อยแล้ว\",\n        });\n      } catch (error) {\n        toast({\n          title: \"เกิดข้อผิดพลาด\",\n          description: \"ไม่สามารถรีเซ็ตรหัสผ่านได้ กรุณาลองใหม่อีกครั้ง\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const getAvatarColor = (gender: Gender) => {\n    return gender === Gender.MALE ? 'bg-indigo-500' : 'bg-sky-500';\n  };\n\n  const getGenderIcon = (gender: Gender) => {\n    return gender === Gender.MALE ? 'text-blue-500' : 'text-pink-500';\n  };\n\n  const getInitials = (nickname: string) => {\n    return nickname.charAt(0);\n  };\n\n  if (loading) {\n    return <Loading className=\"h-screen\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Button\n                variant=\"ghost\"\n                onClick={() => setLocation('/admin')}\n                className=\"mr-4 text-gray-500 hover:text-gray-700\"\n              >\n                <i className=\"fas fa-arrow-left\"></i>\n              </Button>\n              <img \n                src=\"https://in2it-service.com/IN2IT/logo/in2it-logo.png\" \n                alt=\"IN2IT\" \n                className=\"h-8 w-auto\"\n              />\n              <h1 className=\"ml-4 text-xl font-semibold text-gray-800\">จัดการพนักงาน</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={handleAddEmployee}\n                className=\"bg-primary hover:bg-primary/90 text-white font-medium\"\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                เพิ่มพนักงาน\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h2 className=\"text-xl font-semibold text-gray-800\">รายชื่อพนักงาน</h2>\n              <div className=\"flex space-x-4\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"ค้นหาพนักงาน...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-64\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-700\">ชื่อ</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-700\">ตำแหน่ง</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-700\">อีเมล</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-700\">จัดการ</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredEmployees.length === 0 ? (\n                    <tr>\n                      <td colSpan={4} className=\"text-center py-8 text-gray-500\">\n                        {searchTerm ? 'ไม่พบพนักงานที่ค้นหา' : 'ไม่มีพนักงานในระบบ'}\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredEmployees.map((employee) => (\n                      <tr key={employee.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                        <td className=\"py-4 px-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            {employee.profilePicture ? (\n                              <img \n                                src={employee.profilePicture} \n                                alt={employee.nickname || employee.firstName} \n                                className=\"w-10 h-10 rounded-full object-cover border-2 border-gray-200\"\n                              />\n                            ) : (\n                              <div className={`w-10 h-10 rounded-full flex items-center justify-center ${getAvatarColor(employee.gender)} border-2 border-gray-200 shadow-sm`}>\n                                <span className=\"text-white font-medium text-sm\">\n                                  {getInitials(employee.nickname)}\n                                </span>\n                              </div>\n                            )}\n                            <div>\n                              <div className=\"flex items-center space-x-2\">\n                                <p className=\"font-semibold text-gray-800\">{employee.nickname}</p>\n                                {employee.gender === Gender.MALE ? (\n                                  <div className=\"w-4 h-4 rounded-full bg-blue-500 flex items-center justify-center\">\n                                    <span className=\"text-white text-xs font-bold\">M</span>\n                                  </div>\n                                ) : (\n                                  <div className=\"w-4 h-4 rounded-full bg-pink-500 flex items-center justify-center\">\n                                    <span className=\"text-white text-xs font-bold\">F</span>\n                                  </div>\n                                )}\n                              </div>\n                              <p className=\"text-sm text-gray-600\">\n                                {employee.title}{employee.firstName} {employee.lastName}\n                              </p>\n                              <p className=\"text-sm text-gray-500\">@{employee.username}</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-4 text-gray-600\">{employee.position}</td>\n                        <td className=\"py-4 px-4 text-gray-600\">{employee.email}</td>\n                        <td className=\"py-4 px-4\">\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditEmployee(employee)}\n                              className=\"text-primary hover:text-primary/80\"\n                            >\n                              <i className=\"fas fa-edit mr-1\"></i>\n                              แก้ไข\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleResetPassword(employee.id)}\n                              className=\"text-gray-500 hover:text-gray-700\"\n                            >\n                              <i className=\"fas fa-key mr-1\"></i>\n                              รีเซ็ตรหัสผ่าน\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setViewingEmployeeId(employee.id)}\n                              className=\"text-blue-500 hover:text-blue-700\"\n                            >\n                              <i className=\"fas fa-calendar-alt mr-1\"></i>\n                              ใบลา\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteEmployee(employee.id)}\n                              className=\"text-red-600 hover:text-red-800\"\n                            >\n                              <i className=\"fas fa-trash mr-1\"></i>\n                              ลบ\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Employee Modal */}\n      <EmployeeModal\n        isOpen={showModal}\n        onClose={() => setShowModal(false)}\n        employee={editingEmployee}\n        onSave={loadEmployees}\n      />\n\n      {/* Employee Leave View */}\n      <EmployeeLeaveView\n        employeeId={viewingEmployeeId}\n        onClose={() => setViewingEmployeeId(null)}\n      />\n    </div>\n  );\n};\n","size_bytes":12831},"client/src/components/admin/EmployeeModal.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { UserData, Title, Gender, UserRole } from '@/types';\nimport { usersAPI } from '@/services/api';\n\n// Helper functions for employee creation\nconst generateUsername = (firstName: string, lastName: string): string => {\n  return `${firstName.toLowerCase()}.${lastName.toLowerCase()}`;\n};\n\nconst getDefaultLeaveBalances = () => ({\n  accumulated: 0,\n  sick: 0,\n  maternity: 0,\n  paternity: 0,\n  personal: 0,\n  vacation: 0,\n  ordination: 0,\n  military: 0,\n  study: 0,\n  international: 0,\n  spouse: 0\n});\n// Image upload temporarily disabled for PostgreSQL migration\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Upload, X } from 'lucide-react';\n\ninterface EmployeeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  employee?: UserData | null;\n  onSave: () => void;\n}\n\nexport const EmployeeModal: React.FC<EmployeeModalProps> = ({ \n  isOpen, \n  onClose, \n  employee, \n  onSave \n}) => {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [profileImageFile, setProfileImageFile] = useState<File | null>(null);\n  const [profileImagePreview, setProfileImagePreview] = useState<string>('');\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [formData, setFormData] = useState({\n    title: Title.NAI,\n    nickname: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    position: '',\n    username: '',\n    password: '',\n    profilePicture: '',\n    address: '',\n    socialMedia: '',\n    lineUserId: '',\n    gender: Gender.MALE,\n    leaveBalances: getDefaultLeaveBalances()\n  });\n\n  useEffect(() => {\n    if (employee) {\n      setFormData({\n        title: employee.title,\n        nickname: employee.nickname,\n        firstName: employee.firstName,\n        lastName: employee.lastName,\n        email: employee.email,\n        phone: employee.phone,\n        position: employee.position,\n        username: employee.username,\n        password: employee.password,\n        profilePicture: employee.profilePicture || '',\n        address: employee.address || '',\n        socialMedia: employee.socialMedia || '',\n        lineUserId: employee.lineUserId || '',\n        gender: employee.gender,\n        leaveBalances: employee.leaveBalances\n      });\n      // Set preview for existing profile picture\n      if (employee.profilePicture) {\n        setProfileImagePreview(employee.profilePicture);\n      }\n    } else {\n      setFormData({\n        title: Title.NAI,\n        nickname: '',\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '',\n        position: '',\n        username: '',\n        password: '',\n        profilePicture: '',\n        address: '',\n        socialMedia: '',\n        lineUserId: '',\n        gender: Gender.MALE,\n        leaveBalances: getDefaultLeaveBalances()\n      });\n      setProfileImagePreview('');\n      setProfileImageFile(null);\n    }\n  }, [employee]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      let profilePictureUrl = formData.profilePicture;\n\n      // Handle image upload if a new file is selected\n      if (profileImageFile) {\n        const reader = new FileReader();\n        profilePictureUrl = await new Promise((resolve) => {\n          reader.onload = () => resolve(reader.result as string);\n          reader.readAsDataURL(profileImageFile);\n        });\n      }\n\n      if (employee) {\n        // Update existing employee\n        await usersAPI.update(employee.id, {\n          title: formData.title,\n          nickname: formData.nickname,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email,\n          phone: formData.phone,\n          position: formData.position,\n          username: formData.username,\n          password: formData.password,\n          profilePicture: profilePictureUrl,\n          address: formData.address,\n          socialMedia: formData.socialMedia,\n          lineUserId: formData.lineUserId,\n          gender: formData.gender,\n          leaveBalances: formData.leaveBalances\n        });\n\n        toast({\n          title: \"แก้ไขพนักงานสำเร็จ\",\n          description: \"ข้อมูลพนักงานถูกแก้ไขเรียบร้อยแล้ว\",\n        });\n      } else {\n        // Add new employee\n        const newEmployee = await usersAPI.create({\n          username: formData.username,\n          password: formData.password,\n          role: UserRole.EMPLOYEE,\n          title: formData.title,\n          nickname: formData.nickname,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email,\n          phone: formData.phone,\n          position: formData.position,\n          profilePicture: profilePictureUrl,\n          address: formData.address,\n          socialMedia: formData.socialMedia,\n          lineUserId: formData.lineUserId,\n          gender: formData.gender,\n          leaveBalances: formData.leaveBalances\n        });\n\n        // Image handling completed\n\n        toast({\n          title: \"เพิ่มพนักงานสำเร็จ\",\n          description: `พนักงานใหม่ถูกเพิ่มเรียบร้อยแล้ว ชื่อผู้ใช้: ${formData.username}`,\n        });\n      }\n\n      onSave();\n      onClose();\n      \n      // Reset form and image states\n      setProfileImageFile(null);\n      setProfileImagePreview('');\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถบันทึกข้อมูลพนักงานได้ กรุณาลองใหม่อีกครั้ง\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string | number) => {\n    if (field.startsWith('leaveBalances.')) {\n      const balanceType = field.split('.')[1] as keyof typeof formData.leaveBalances;\n      setFormData(prev => ({\n        ...prev,\n        leaveBalances: {\n          ...prev.leaveBalances,\n          [balanceType]: Number(value)\n        }\n      }));\n    } else {\n      setFormData(prev => ({ ...prev, [field]: value }));\n    }\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"ข้อผิดพลาด\",\n          description: \"กรุณาเลือกไฟล์รูปภาพเท่านั้น\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Validate file size (2MB max to prevent base64 encoding issues)\n      if (file.size > 2 * 1024 * 1024) {\n        toast({\n          title: \"ข้อผิดพลาด\",\n          description: \"ขนาดไฟล์ต้องไม่เกิน 2MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setProfileImageFile(file);\n      \n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setProfileImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const removeProfileImage = () => {\n    setProfileImageFile(null);\n    setProfileImagePreview('');\n    setFormData(prev => ({ ...prev, profilePicture: '' }));\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-semibold text-gray-800\">\n            {employee ? 'แก้ไขพนักงาน' : 'เพิ่มพนักงานใหม่'}\n          </DialogTitle>\n          <DialogDescription>\n            {employee ? 'แก้ไขข้อมูลพนักงานที่มีอยู่' : 'เพิ่มพนักงานใหม่ในระบบ'}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"title\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                คำนำหน้า\n              </Label>\n              <Select \n                value={formData.title} \n                onValueChange={(value) => handleInputChange('title', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"เลือกคำนำหน้า\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value={Title.NAI}>นาย</SelectItem>\n                  <SelectItem value={Title.NANG}>นาง</SelectItem>\n                  <SelectItem value={Title.NANGSAO}>นางสาว</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"nickname\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                ชื่อเล่น\n              </Label>\n              <Input\n                id=\"nickname\"\n                value={formData.nickname}\n                onChange={(e) => handleInputChange('nickname', e.target.value)}\n                placeholder=\"ป้อนชื่อเล่น\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"firstName\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                ชื่อจริง\n              </Label>\n              <Input\n                id=\"firstName\"\n                value={formData.firstName}\n                onChange={(e) => handleInputChange('firstName', e.target.value)}\n                placeholder=\"ป้อนชื่อจริง\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"lastName\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                นามสกุล\n              </Label>\n              <Input\n                id=\"lastName\"\n                value={formData.lastName}\n                onChange={(e) => handleInputChange('lastName', e.target.value)}\n                placeholder=\"ป้อนนามสกุล\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                อีเมล\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                placeholder=\"example@in2it.co.th\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"phone\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                เบอร์โทรศัพท์\n              </Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange('phone', e.target.value)}\n                placeholder=\"08X-XXX-XXXX\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"gender\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                เพศ\n              </Label>\n              <Select value={formData.gender} onValueChange={(value) => handleInputChange('gender', value as Gender)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"เลือกเพศ\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value={Gender.MALE}>ชาย</SelectItem>\n                  <SelectItem value={Gender.FEMALE}>หญิง</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"position\" className=\"text-sm font-medium text-gray-700 mb-2\">\n              ตำแหน่ง\n            </Label>\n            <Input\n              id=\"position\"\n              value={formData.position}\n              onChange={(e) => handleInputChange('position', e.target.value)}\n              placeholder=\"ป้อนตำแหน่งงาน\"\n              required\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                ชื่อผู้ใช้ *\n              </Label>\n              <Input\n                id=\"username\"\n                value={formData.username}\n                onChange={(e) => handleInputChange('username', e.target.value)}\n                placeholder=\"ป้อนชื่อผู้ใช้\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                รหัสผ่าน *\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                placeholder=\"ป้อนรหัสผ่าน\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">\n                รูปโปรไฟล์\n              </Label>\n              <div className=\"space-y-4\">\n                {profileImagePreview && (\n                  <div className=\"relative inline-block\">\n                    <img\n                      src={profileImagePreview}\n                      alt=\"Profile preview\"\n                      className=\"w-24 h-24 rounded-full object-cover border-2 border-gray-200\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full p-0\"\n                      onClick={removeProfileImage}\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                )}\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => fileInputRef.current?.click()}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Upload className=\"h-4 w-4\" />\n                    เลือกรูปภาพ\n                  </Button>\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                  />\n                </div>\n                <p className=\"text-xs text-gray-500\">\n                  รองรับไฟล์: JPG, PNG, GIF (ขนาดไม่เกิน 5MB)\n                </p>\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"lineUserId\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                Line User ID\n              </Label>\n              <Input\n                id=\"lineUserId\"\n                value={formData.lineUserId}\n                onChange={(e) => handleInputChange('lineUserId', e.target.value)}\n                placeholder=\"Line User ID\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"address\" className=\"text-sm font-medium text-gray-700 mb-2\">\n              ที่อยู่\n            </Label>\n            <Input\n              id=\"address\"\n              value={formData.address}\n              onChange={(e) => handleInputChange('address', e.target.value)}\n              placeholder=\"ป้อนที่อยู่\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"socialMedia\" className=\"text-sm font-medium text-gray-700 mb-2\">\n              โซเชียลมีเดีย\n            </Label>\n            <Input\n              id=\"socialMedia\"\n              value={formData.socialMedia}\n              onChange={(e) => handleInputChange('socialMedia', e.target.value)}\n              placeholder=\"Facebook, Instagram, หรือโซเชียลมีเดียอื่นๆ\"\n            />\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">ตั้งค่าวันลา</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"accumulatedLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  วันลาสะสม\n                </Label>\n                <Input\n                  id=\"accumulatedLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.accumulated}\n                  onChange={(e) => handleInputChange('leaveBalances.accumulated', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"sickLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาป่วย\n                </Label>\n                <Input\n                  id=\"sickLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.sick}\n                  onChange={(e) => handleInputChange('leaveBalances.sick', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"maternityLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาคลอดบุตร\n                </Label>\n                <Input\n                  id=\"maternityLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.maternity}\n                  onChange={(e) => handleInputChange('leaveBalances.maternity', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"paternityLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาไปช่วยเหลือภริยาที่คลอดบุตร\n                </Label>\n                <Input\n                  id=\"paternityLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.paternity}\n                  onChange={(e) => handleInputChange('leaveBalances.paternity', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"personalLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลากิจส่วนตัว\n                </Label>\n                <Input\n                  id=\"personalLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.personal}\n                  onChange={(e) => handleInputChange('leaveBalances.personal', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"vacationLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาพักผ่อน\n                </Label>\n                <Input\n                  id=\"vacationLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.vacation}\n                  onChange={(e) => handleInputChange('leaveBalances.vacation', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"ordinationLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาอุปสมบทหรือการลาไปประกอบพิธีฮัจย์\n                </Label>\n                <Input\n                  id=\"ordinationLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.ordination}\n                  onChange={(e) => handleInputChange('leaveBalances.ordination', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"militaryLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาเข้ารับการตรวจเลือกทหาร\n                </Label>\n                <Input\n                  id=\"militaryLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.military}\n                  onChange={(e) => handleInputChange('leaveBalances.military', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"studyLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาไปศึกษา ฝึกอบรม ปฏิบัติการวิจัย หรือดูงาน\n                </Label>\n                <Input\n                  id=\"studyLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.study}\n                  onChange={(e) => handleInputChange('leaveBalances.study', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"internationalLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาไปปฏิบัติงานในองค์การระหว่างประเทศ\n                </Label>\n                <Input\n                  id=\"internationalLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.international}\n                  onChange={(e) => handleInputChange('leaveBalances.international', e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"spouseLeave\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  ลาติดตามคู่สมรส\n                </Label>\n                <Input\n                  id=\"spouseLeave\"\n                  type=\"number\"\n                  min=\"0\"\n                  value={formData.leaveBalances.spouse}\n                  onChange={(e) => handleInputChange('leaveBalances.spouse', e.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n            >\n              ยกเลิก\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"bg-primary hover:bg-primary/90\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'กำลังบันทึก...' : 'บันทึก'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":24727},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { useLocation } from 'wouter';\nimport { UserRole } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\n\nexport const LoginForm: React.FC = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const success = await login(username, password);\n      if (success) {\n        // Redirect based on user role\n        const user = JSON.parse(localStorage.getItem('currentUser') || '{}');\n        if (user.role === UserRole.ADMIN) {\n          setLocation('/admin');\n        } else {\n          setLocation('/employee');\n        }\n      } else {\n        toast({\n          title: \"เข้าสู่ระบบไม่สำเร็จ\",\n          description: \"กรุณาตรวจสอบชื่อผู้ใช้และรหัสผ่าน\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถเข้าสู่ระบบได้ กรุณาลองใหม่อีกครั้ง\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 to-primary/5 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <img \n              src=\"https://in2it-service.com/IN2IT/logo/in2it-logo.png\" \n              alt=\"IN2IT Company Logo\" \n              className=\"mx-auto h-16 w-auto mb-4\"\n            />\n            <h1 className=\"text-2xl font-bold text-gray-800 mb-2\">ระบบจัดการการลา</h1>\n            <p className=\"text-gray-600\">Leave Management System</p>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700\">\n                ชื่อผู้ใช้\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"mt-2\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                รหัสผ่าน\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"mt-2\"\n                required\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-md transform hover:scale-105 transition-all duration-200 shadow-lg\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'กำลังเข้าสู่ระบบ...' : 'เข้าสู่ระบบ'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","size_bytes":3931},"client/src/components/employee/EmployeeDashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { LeaveRequest } from '@/types';\nimport { leaveRequestsAPI } from '@/services/api';\nimport { Header } from '@/components/layout/Header';\nimport { LeaveRequestForm } from './LeaveRequestForm';\nimport { LeaveHistory } from './LeaveHistory';\nimport { LeaveBalance } from './LeaveBalance';\nimport { LeaveTypesOverview } from './LeaveTypesOverview';\n\nimport { ProfileDashboard } from './ProfileDashboard';\nimport { CalendarView } from '../shared/CalendarView';\nimport { LeaveRequestModal } from '../shared/LeaveRequestModal';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nexport const EmployeeDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [userLeaveRequests, setUserLeaveRequests] = useState<LeaveRequest[]>([]);\n  const [selectedRequest, setSelectedRequest] = useState<LeaveRequest | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    loadUserLeaveRequests();\n  }, [user]);\n\n  const loadUserLeaveRequests = async () => {\n    if (!user) return;\n    try {\n      const requests = await leaveRequestsAPI.getByUserId(user.id);\n      setUserLeaveRequests(requests);\n    } catch (error) {\n      console.error('Error loading user leave requests:', error);\n    }\n  };\n\n  const handleProfileClick = () => {\n    setActiveTab('profile');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header onProfileClick={handleProfileClick} />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"dashboard\">แดชบอร์ด</TabsTrigger>\n            <TabsTrigger value=\"calendar\">ปฏิทินการลา</TabsTrigger>\n            <TabsTrigger value=\"profile\">ข้อมูลส่วนตัว</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"dashboard\" className=\"mt-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Left Column - Forms and History */}\n              <div className=\"lg:col-span-2 space-y-8\">\n                <LeaveRequestForm />\n                <LeaveHistory />\n              </div>\n\n              {/* Right Column - Leave Balance and Types */}\n              <div className=\"space-y-8\">\n                <LeaveBalance />\n                <LeaveTypesOverview />\n              </div>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"calendar\" className=\"mt-8\">\n            <CalendarView \n              leaveRequests={userLeaveRequests}\n              isAdmin={false}\n              onEventClick={(event) => {\n                setSelectedRequest(event.resource);\n                setIsModalOpen(true);\n              }}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"profile\" className=\"mt-8\">\n            <ProfileDashboard />\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Leave Request Modal */}\n      <LeaveRequestModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false);\n          setSelectedRequest(null);\n        }}\n        request={selectedRequest}\n        employee={user}\n        showActions={false}\n      />\n    </div>\n  );\n};\n","size_bytes":3513},"client/src/components/employee/LeaveBalance.tsx":{"content":"import { useAuth } from '@/context/SimpleAuthContext';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useState, useEffect } from 'react';\nimport { usersAPI } from '@/services/api';\nimport { UserData } from '@/types';\n\nexport const LeaveBalance: React.FC = () => {\n  const { user } = useAuth();\n  const [currentUser, setCurrentUser] = useState<UserData | null>(user);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadUserData();\n    }\n  }, [user]);\n\n  const loadUserData = async () => {\n    if (!user) return;\n    setLoading(true);\n    try {\n      const users = await usersAPI.getAll();\n      const updatedUser = users.find(u => u.id === user.id);\n      if (updatedUser) {\n        setCurrentUser(updatedUser);\n      }\n    } catch (error) {\n      console.error('Error loading user data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Refresh user data every 5 seconds when component is visible\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (user && document.visibilityState === 'visible') {\n        loadUserData();\n      }\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [user]);\n\n  if (!currentUser) return null;\n\n  const balanceItems = [\n    {\n      type: 'วันลาสะสม',\n      englishType: 'Accumulated Leave',\n      balance: currentUser.leaveBalances.accumulated,\n      color: 'bg-blue-50 text-blue-600'\n    },\n    {\n      type: 'ลาป่วย',\n      englishType: 'Sick Leave',\n      balance: currentUser.leaveBalances.sick,\n      color: 'bg-red-50 text-red-600'\n    },\n    {\n      type: 'ลาคลอดบุตร',\n      englishType: 'Maternity Leave',\n      balance: currentUser.leaveBalances.maternity,\n      color: 'bg-purple-50 text-purple-600'\n    },\n    {\n      type: 'ลาไปช่วยเหลือภริยาที่คลอดบุตร',\n      englishType: 'Paternity Leave',\n      balance: currentUser.leaveBalances.paternity,\n      color: 'bg-indigo-50 text-indigo-600'\n    },\n    {\n      type: 'ลากิจส่วนตัว',\n      englishType: 'Personal Leave',\n      balance: currentUser.leaveBalances.personal,\n      color: 'bg-yellow-50 text-yellow-600'\n    },\n    {\n      type: 'ลาพักผ่อน',\n      englishType: 'Vacation Leave',\n      balance: currentUser.leaveBalances.vacation,\n      color: 'bg-green-50 text-green-600'\n    },\n    {\n      type: 'ลาอุปสมบทหรือการลาไปประกอบพิธีฮัจย์',\n      englishType: 'Ordination Leave',\n      balance: currentUser.leaveBalances.ordination,\n      color: 'bg-orange-50 text-orange-600'\n    },\n    {\n      type: 'ลาเข้ารับการตรวจเลือกทหาร',\n      englishType: 'Military Leave',\n      balance: currentUser.leaveBalances.military,\n      color: 'bg-gray-50 text-gray-600'\n    },\n    {\n      type: 'ลาไปศึกษา ฝึกอบรม ปฏิบัติการวิจัย หรือดูงาน',\n      englishType: 'Study Leave',\n      balance: currentUser.leaveBalances.study,\n      color: 'bg-cyan-50 text-cyan-600'\n    },\n    {\n      type: 'ลาไปปฏิบัติงานในองค์การระหว่างประเทศ',\n      englishType: 'International Leave',\n      balance: currentUser.leaveBalances.international,\n      color: 'bg-teal-50 text-teal-600'\n    },\n    {\n      type: 'ลาติดตามคู่สมรส',\n      englishType: 'Spouse Leave',\n      balance: currentUser.leaveBalances.spouse,\n      color: 'bg-pink-50 text-pink-600'\n    }\n  ];\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-xl font-semibold text-gray-800\">ยอดวันลาคงเหลือ</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {balanceItems.map((item, index) => (\n            <div \n              key={index}\n              className={`flex justify-between items-center p-4 rounded-lg ${item.color.split(' ')[0]}`}\n            >\n              <div>\n                <p className=\"font-medium text-gray-800\">{item.type}</p>\n                <p className=\"text-sm text-gray-600\">{item.englishType}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className={`text-2xl font-bold ${item.color.split(' ')[1]}`}>\n                  {item.balance}\n                </p>\n                <p className=\"text-sm text-gray-600\">วัน</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":4741},"client/src/components/employee/LeaveHistory.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { LeaveRequest, LeaveStatus } from '@/types';\nimport { leaveRequestsAPI } from '@/services/api';\nimport { formatDateThai } from '@/utils/dateHelpers';\nimport { generatePrintableLeaveForm } from '@/utils/pdfGenerator';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Loading } from '@/components/ui/loading';\nimport { useToast } from '@/hooks/use-toast';\n\nexport const LeaveHistory: React.FC = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [deletingRequestId, setDeletingRequestId] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (user) {\n      loadLeaveHistory();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    const handleLeaveRequestSubmitted = () => {\n      loadLeaveHistory();\n    };\n\n    window.addEventListener('leaveRequestSubmitted', handleLeaveRequestSubmitted);\n    return () => {\n      window.removeEventListener('leaveRequestSubmitted', handleLeaveRequestSubmitted);\n    };\n  }, []);\n\n  const loadLeaveHistory = async () => {\n    if (!user) return;\n\n    try {\n      const requests = await leaveRequestsAPI.getByUserId(user.id);\n      setLeaveRequests(requests.sort((a, b) => new Date(b.requestDate).getTime() - new Date(a.requestDate).getTime()));\n    } catch (error) {\n      console.error('Error loading leave history:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadge = (status: LeaveStatus) => {\n    switch (status) {\n      case LeaveStatus.APPROVED:\n        return <Badge className=\"bg-green-100 text-green-800\">อนุมัติ</Badge>;\n      case LeaveStatus.REJECTED:\n        return <Badge className=\"bg-red-100 text-red-800\">ปฏิเสธ</Badge>;\n      case LeaveStatus.PENDING:\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">รอพิจารณา</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">{status}</Badge>;\n    }\n  };\n\n  const handlePrintLeaveForm = (request: LeaveRequest) => {\n    if (user) {\n      generatePrintableLeaveForm(request, user);\n    }\n  };\n\n  const handleDeleteRequest = async (requestId: string) => {\n    if (!confirm('คุณแน่ใจหรือไม่ที่จะลบคำขอลานี้?')) {\n      return;\n    }\n\n    setDeletingRequestId(requestId);\n    try {\n      await leaveRequestsAPI.delete(requestId);\n      await loadLeaveHistory(); // Refresh the list\n      toast({\n        title: \"สำเร็จ\",\n        description: \"ลบคำขอลาเรียบร้อยแล้ว\",\n      });\n    } catch (error) {\n      console.error('Error deleting leave request:', error);\n      let description = 'ไม่สามารถลบคำขอลาได้';\n      \n      if (error instanceof Error && error.message.includes('400:')) {\n        // Extract the actual error message from the API response\n        const match = error.message.match(/400: (.+)/);\n        if (match) {\n          description = match[1];\n        } else if (error.message.includes('approved leave request') || error.message.includes('อนุมัติแล้ว')) {\n          description = 'ไม่สามารถลบคำขอลาที่ได้รับการอนุมัติแล้ว เนื่องจากได้มีการหักวันลาแล้ว';\n        }\n      }\n      \n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description,\n        variant: \"destructive\",\n      });\n    } finally {\n      setDeletingRequestId(null);\n    }\n  };\n\n  if (loading) {\n    return <Loading className=\"h-32\" />;\n  }\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-xl font-semibold text-gray-800\">ประวัติการลา</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-gray-200\">\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">วันที่ยื่น</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">ประเภท</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">วันที่ลา</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">จำนวนวัน</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">สถานะ</th>\n                <th className=\"text-left py-3 px-4 font-medium text-gray-700\">การจัดการ</th>\n              </tr>\n            </thead>\n            <tbody>\n              {leaveRequests.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8 text-gray-500\">\n                    ไม่พบประวัติการลา\n                  </td>\n                </tr>\n              ) : (\n                leaveRequests.map((request) => (\n                  <tr key={request.id} className=\"border-b border-gray-100\">\n                    <td className=\"py-3 px-4 text-gray-600\">\n                      {formatDateThai(request.requestDate)}\n                    </td>\n                    <td className=\"py-3 px-4 text-gray-600\">{request.leaveType}</td>\n                    <td className=\"py-3 px-4 text-gray-600\">\n                      {request.startDate === request.endDate ? \n                        formatDateThai(request.startDate) : \n                        `${formatDateThai(request.startDate)} - ${formatDateThai(request.endDate)}`\n                      }\n                    </td>\n                    <td className=\"py-3 px-4 text-gray-600\">{request.totalDays}</td>\n                    <td className=\"py-3 px-4\">\n                      {getStatusBadge(request.status)}\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handlePrintLeaveForm(request)}\n                          disabled={request.status === LeaveStatus.PENDING || request.status === LeaveStatus.REJECTED}\n                          className=\"text-primary hover:text-primary/80\"\n                        >\n                          <i className=\"fas fa-print mr-1\"></i>\n                          พิมพ์\n                        </Button>\n                        {(request.status === LeaveStatus.PENDING || request.status === LeaveStatus.REJECTED) && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteRequest(request.id)}\n                            disabled={deletingRequestId === request.id}\n                            className=\"text-red-600 hover:text-red-800\"\n                          >\n                            <i className=\"fas fa-trash mr-1\"></i>\n                            {deletingRequestId === request.id ? 'กำลังลบ...' : 'ลบ'}\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":7808},"client/src/components/employee/LeaveRequestForm.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { LeaveType, LeaveStatus } from '@/types';\nimport { leaveRequestsAPI } from '@/services/api';\nimport { calculateDaysBetween } from '@/utils/dateHelpers';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\n\nexport const LeaveRequestForm: React.FC = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showInsufficientBalanceModal, setShowInsufficientBalanceModal] = useState(false);\n  const [formData, setFormData] = useState({\n    leaveType: '',\n    startDate: '',\n    endDate: '',\n    reason: '',\n    contactNumber: '',\n    document: null as File | null\n  });\n  const [totalDays, setTotalDays] = useState(0);\n\n  const calculateAndUpdateDays = (startDate: string, endDate: string) => {\n    if (startDate && endDate) {\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      if (end >= start) {\n        const days = calculateDaysBetween(start, end);\n        setTotalDays(days);\n      } else {\n        setTotalDays(0);\n      }\n    } else {\n      setTotalDays(0);\n    }\n  };\n\n  const handleDateChange = (field: 'startDate' | 'endDate', value: string) => {\n    const newFormData = { ...formData, [field]: value };\n    setFormData(newFormData);\n    calculateAndUpdateDays(newFormData.startDate, newFormData.endDate);\n  };\n\n  const getLeaveBalance = (leaveType: LeaveType) => {\n    if (!user) return 0;\n    \n    const balanceMap = {\n      [LeaveType.ACCUMULATED]: user.leaveBalances.accumulated,\n      [LeaveType.SICK]: user.leaveBalances.sick,\n      [LeaveType.MATERNITY]: user.leaveBalances.maternity,\n      [LeaveType.PATERNITY]: user.leaveBalances.paternity,\n      [LeaveType.PERSONAL]: user.leaveBalances.personal,\n      [LeaveType.VACATION]: user.leaveBalances.vacation,\n      [LeaveType.ORDINATION]: user.leaveBalances.ordination,\n      [LeaveType.MILITARY]: user.leaveBalances.military,\n      [LeaveType.STUDY]: user.leaveBalances.study,\n      [LeaveType.INTERNATIONAL]: user.leaveBalances.international,\n      [LeaveType.SPOUSE]: user.leaveBalances.spouse,\n    };\n    \n    return balanceMap[leaveType] || 0;\n  };\n\n  const validateLeaveBalance = () => {\n    if (!formData.leaveType || totalDays === 0) return true;\n    \n    const availableBalance = getLeaveBalance(formData.leaveType as LeaveType);\n    return availableBalance >= totalDays;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) return;\n\n    // Validate required fields\n    if (!formData.leaveType || !formData.startDate || !formData.endDate || !formData.reason || !formData.contactNumber) {\n      toast({\n        title: \"ข้อมูลไม่ครบถ้วน\",\n        description: \"กรุณากรอกข้อมูลให้ครบถ้วน\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const startDate = new Date(formData.startDate);\n    const endDate = new Date(formData.endDate);\n\n    if (endDate < startDate) {\n      toast({\n        title: \"วันที่ไม่ถูกต้อง\",\n        description: \"วันที่สิ้นสุดต้องมากกว่าหรือเท่ากับวันที่เริ่มต้น\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check leave balance\n    if (!validateLeaveBalance()) {\n      setShowInsufficientBalanceModal(true);\n      return;\n    }\n\n    // Check document requirement for sick leave\n    if (formData.leaveType === LeaveType.SICK && !formData.document) {\n      toast({\n        title: \"เอกสารไม่ครบถ้วน\",\n        description: \"กรุณาแนบใบรับรองแพทย์สำหรับการลาป่วย\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      await leaveRequestsAPI.create({\n        userId: user.id,\n        employeeName: `${user.title}${user.firstName} ${user.lastName}`,\n        leaveType: formData.leaveType as LeaveType,\n        startDate,\n        endDate,\n        totalDays,\n        reason: formData.reason,\n        contactNumber: formData.contactNumber,\n        status: LeaveStatus.PENDING\n      });\n\n      toast({\n        title: \"ส่งคำขอลาสำเร็จ\",\n        description: \"คำขอลาของคุณถูกส่งไปยังผู้ดูแลระบบเรียบร้อยแล้ว\",\n      });\n\n      // Reset form\n      setFormData({\n        leaveType: '',\n        startDate: '',\n        endDate: '',\n        reason: '',\n        contactNumber: '',\n        document: null\n      });\n      setTotalDays(0);\n\n      // Trigger reload of leave history\n      window.dispatchEvent(new CustomEvent('leaveRequestSubmitted'));\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถส่งคำขอลาได้ กรุณาลองใหม่อีกครั้ง\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <CardTitle className=\"text-xl font-semibold text-gray-800\">ขอลาใหม่</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"leaveType\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                ประเภทการลา\n              </Label>\n              <Select value={formData.leaveType} onValueChange={(value) => handleInputChange('leaveType', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"เลือกประเภทการลา\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.values(LeaveType).map((type) => (\n                    <SelectItem key={type} value={type}>\n                      {type}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"contactNumber\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                เบอร์ติดต่อในระหว่างลา\n              </Label>\n              <Input\n                id=\"contactNumber\"\n                type=\"tel\"\n                value={formData.contactNumber}\n                onChange={(e) => handleInputChange('contactNumber', e.target.value)}\n                placeholder=\"08X-XXX-XXXX\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"startDate\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                วันที่เริ่มต้น\n              </Label>\n              <Input\n                id=\"startDate\"\n                type=\"date\"\n                value={formData.startDate}\n                onChange={(e) => handleDateChange('startDate', e.target.value)}\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"endDate\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                วันที่สิ้นสุด\n              </Label>\n              <Input\n                id=\"endDate\"\n                type=\"date\"\n                value={formData.endDate}\n                onChange={(e) => handleDateChange('endDate', e.target.value)}\n                required\n              />\n            </div>\n          </div>\n          \n          {/* Date Summary */}\n          {totalDays > 0 && (\n            <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n              <p className=\"text-sm text-blue-700\">\n                <strong>จำนวนวันที่ขอลา: {totalDays} วัน</strong>\n              </p>\n              {formData.leaveType && (\n                <p className=\"text-sm text-blue-600 mt-1\">\n                  วันลาคงเหลือ: {getLeaveBalance(formData.leaveType as LeaveType)} วัน\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Document Upload for Sick Leave */}\n          {formData.leaveType === LeaveType.SICK && (\n            <div>\n              <Label htmlFor=\"document\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                แนบใบรับรองแพทย์ <span className=\"text-red-500\">*</span>\n              </Label>\n              <Input\n                id=\"document\"\n                type=\"file\"\n                accept=\".pdf,.jpg,.jpeg,.png\"\n                onChange={(e) => setFormData(prev => ({ ...prev, document: e.target.files?.[0] || null }))}\n                className=\"w-full\"\n                required\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                รองรับไฟล์ PDF, JPG, JPEG, PNG ขนาดไม่เกิน 5MB\n              </p>\n            </div>\n          )}\n          \n          <div>\n            <Label htmlFor=\"reason\" className=\"text-sm font-medium text-gray-700 mb-2\">\n              เหตุผล\n            </Label>\n            <Textarea\n              id=\"reason\"\n              rows={3}\n              value={formData.reason}\n              onChange={(e) => handleInputChange('reason', e.target.value)}\n              placeholder=\"ระบุเหตุผลการลา\"\n              required\n            />\n          </div>\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-md shadow-lg transform hover:scale-105 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none\"\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? 'กำลังส่งคำขอ...' : 'ส่งคำขอลา'}\n          </Button>\n        </form>\n      </CardContent>\n\n      {/* Insufficient Balance Modal */}\n      <Dialog open={showInsufficientBalanceModal} onOpenChange={setShowInsufficientBalanceModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>วันลาไม่เพียงพอ</DialogTitle>\n            <DialogDescription>\n              คุณไม่มีวันลาคงเหลือ หากต้องการ Submit วันลากรุณาติดต่อเจ้าหน้าที่ HR\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end space-x-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowInsufficientBalanceModal(false)}\n            >\n              ปิด\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n};\n","size_bytes":11927},"client/src/components/employee/LeaveTypesOverview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { LeaveType } from '@/types';\nimport { Calendar, Clock, Heart, Baby, Briefcase, Plane, Church, Shield, GraduationCap, Globe, Users } from 'lucide-react';\n\nconst leaveTypeInfo = [\n  {\n    type: LeaveType.ACCUMULATED,\n    icon: Calendar,\n    description: \"วันลาสะสมที่ได้รับจากการทำงาน\"\n  },\n  {\n    type: LeaveType.SICK,\n    icon: Heart,\n    description: \"ลาเนื่องจากการเจ็บป่วย\"\n  },\n  {\n    type: LeaveType.MATERNITY,\n    icon: Baby,\n    description: \"ลาคลอดบุตรสำหรับผู้หญิง\"\n  },\n  {\n    type: LeaveType.PATERNITY,\n    icon: Users,\n    description: \"ลาช่วยเหลือภริยาที่คลอดบุตร\"\n  },\n  {\n    type: LeaveType.PERSONAL,\n    icon: Briefcase,\n    description: \"ลาเพื่อธุระส่วนตัว\"\n  },\n  {\n    type: LeaveType.VACATION,\n    icon: Plane,\n    description: \"ลาพักผ่อนเพื่อการท่องเที่ยว\"\n  },\n  {\n    type: LeaveType.ORDINATION,\n    icon: Church,\n    description: \"ลาสำหรับพิธีทางศาสนา\"\n  },\n  {\n    type: LeaveType.MILITARY,\n    icon: Shield,\n    description: \"ลาเข้ารับการตรวจเลือกทหาร\"\n  },\n  {\n    type: LeaveType.STUDY,\n    icon: GraduationCap,\n    description: \"ลาเพื่อการศึกษาและพัฒนาตนเอง\"\n  },\n  {\n    type: LeaveType.INTERNATIONAL,\n    icon: Globe,\n    description: \"ลาเพื่อปฏิบัติงานระหว่างประเทศ\"\n  },\n  {\n    type: LeaveType.SPOUSE,\n    icon: Users,\n    description: \"ลาเพื่อติดตามคู่สมรส\"\n  }\n];\n\nexport const LeaveTypesOverview: React.FC = () => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Clock className=\"h-5 w-5\" />\n          ประเภทการลาทั้งหมด\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {leaveTypeInfo.map((item, index) => {\n            const Icon = item.icon;\n            return (\n              <div key={index} className=\"flex items-start gap-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors\">\n                <div className=\"flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Icon className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"font-medium text-gray-900 text-sm mb-1\">\n                    {item.type}\n                  </h4>\n                  <p className=\"text-xs text-gray-600 leading-relaxed\">\n                    {item.description}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        \n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-medium text-blue-900 mb-2\">หมายเหตุ</h4>\n          <ul className=\"text-sm text-blue-800 space-y-1\">\n            <li>• วันลาแต่ละประเภทมีเงื่อนไขและสิทธิ์ต่างกัน</li>\n            <li>• ควรยื่นคำขอล่วงหน้าตามระเบียบบริษัท</li>\n            <li>• ติดต่อฝ่ายบุคคลหากมีข้อสงสัย</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":3792},"client/src/components/employee/ProfileDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { User, Edit2, Save, X, Camera } from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { Title, Gender, type UserData } from '@/types';\n\nexport const ProfileDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [profileData, setProfileData] = useState<Partial<UserData>>({});\n  const [profilePictureFile, setProfilePictureFile] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n\n  const { data: userData, isLoading, error } = useQuery({\n    queryKey: [`/api/users/${user?.id}`],\n    enabled: !!user?.id,\n    retry: false,\n  });\n\n\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: Partial<UserData>) => {\n      const response = await fetch(`/api/users/${user?.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'อัพเดตโปรไฟล์สำเร็จ',\n        description: 'ข้อมูลโปรไฟล์ของคุณได้รับการอัพเดตเรียบร้อยแล้ว',\n      });\n      setIsEditing(false);\n      setProfileData({});\n      setProfilePictureFile(null);\n      setPreviewUrl(null);\n      queryClient.invalidateQueries({ queryKey: [`/api/users/${user?.id}`] });\n    },\n    onError: (error) => {\n      console.error('Profile update error:', error);\n      toast({\n        title: 'เกิดข้อผิดพลาด',\n        description: 'ไม่สามารถอัพเดตโปรไฟล์ได้ กรุณาลองใหม่อีกครั้ง',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleEditClick = () => {\n    setIsEditing(true);\n    // Initialize form data with current user data\n    setProfileData({});\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setProfileData({});\n    setProfilePictureFile(null);\n    setPreviewUrl(null);\n  };\n\n  const handleProfilePictureChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: 'ไฟล์ไม่ถูกต้อง',\n          description: 'กรุณาเลือกไฟล์รูปภาพเท่านั้น',\n          variant: 'destructive',\n        });\n        return;\n      }\n\n      // Validate file size (2MB limit)\n      if (file.size > 2 * 1024 * 1024) {\n        toast({\n          title: 'ไฟล์ใหญ่เกินไป',\n          description: 'กรุณาเลือกไฟล์ที่มีขนาดไม่เกิน 2MB',\n          variant: 'destructive',\n        });\n        return;\n      }\n\n      setProfilePictureFile(file);\n      // Create preview URL\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPreviewUrl(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const convertFileToBase64 = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = (error) => reject(error);\n    });\n  };\n\n  const handleSaveProfile = async () => {\n    try {\n      let updateData = { ...profileData };\n\n      // Handle profile picture upload\n      if (profilePictureFile) {\n        const base64String = await convertFileToBase64(profilePictureFile);\n        updateData.profilePicture = base64String;\n      }\n\n      // Filter out undefined values but allow empty strings\n      const filteredData: Partial<UserData> = {};\n      Object.entries(updateData).forEach(([key, value]) => {\n        if (value !== undefined) {\n          filteredData[key as keyof UserData] = value as any;\n        }\n      });\n\n      console.log('Saving profile data:', filteredData);\n      updateProfileMutation.mutate(filteredData);\n    } catch (error) {\n      console.error('Save profile error:', error);\n      toast({\n        title: 'เกิดข้อผิดพลาด',\n        description: 'ไม่สามารถอัพโหลดรูปภาพได้',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getAvatarColor = (gender: Gender) => {\n    switch (gender) {\n      case Gender.MALE:\n        return 'bg-blue-500';\n      case Gender.FEMALE:\n        return 'bg-pink-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    if (!firstName || !lastName) return 'U';\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-red-600\">เกิดข้อผิดพลาดในการโหลดข้อมูล</p>\n        <Button \n          onClick={() => window.location.reload()} \n          className=\"mt-4\"\n        >\n          โหลดใหม่\n        </Button>\n      </div>\n    );\n  }\n\n  if (!userData) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-600\">ไม่พบข้อมูลผู้ใช้</p>\n      </div>\n    );\n  }\n\n\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <User className=\"h-8 w-8 text-blue-600\" />\n          <h1 className=\"text-2xl font-bold text-gray-800\">ข้อมูลส่วนตัว</h1>\n        </div>\n        {!isEditing ? (\n          <Button onClick={handleEditClick} className=\"flex items-center space-x-2\">\n            <Edit2 className=\"h-4 w-4\" />\n            <span>แก้ไขข้อมูล</span>\n          </Button>\n        ) : (\n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={handleSaveProfile}\n              disabled={updateProfileMutation.isPending}\n              className=\"flex items-center space-x-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              <span>บันทึก</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleCancelEdit}\n              disabled={updateProfileMutation.isPending}\n              className=\"flex items-center space-x-2\"\n            >\n              <X className=\"h-4 w-4\" />\n              <span>ยกเลิก</span>\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <span>ข้อมูลพื้นฐาน</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Profile Picture */}\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              {(previewUrl || userData.profilePicture) ? (\n                <img\n                  src={previewUrl || userData.profilePicture}\n                  alt=\"Profile\"\n                  className=\"w-20 h-20 rounded-full object-cover border-2 border-gray-300\"\n                />\n              ) : (\n                <div className={`w-20 h-20 rounded-full flex items-center justify-center text-white font-bold text-lg ${getAvatarColor(userData.gender || Gender.MALE)}`}>\n                  {getInitials(userData.firstName, userData.lastName)}\n                </div>\n              )}\n              {isEditing && (\n                <label className=\"absolute bottom-0 right-0 bg-blue-600 text-white p-1 rounded-full cursor-pointer hover:bg-blue-700\">\n                  <Camera className=\"h-3 w-3\" />\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleProfilePictureChange}\n                    className=\"hidden\"\n                  />\n                </label>\n              )}\n            </div>\n            <div>\n              <p className=\"font-semibold text-lg\">{userData.firstName || ''} {userData.lastName || ''}</p>\n              <p className=\"text-gray-600\">{userData.position || 'ไม่ระบุตำแหน่ง'}</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Read-only fields */}\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">ชื่อผู้ใช้</Label>\n              <Input value={userData.username || ''} disabled className=\"mt-1\" />\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">อีเมล</Label>\n              <Input value={userData.email || ''} disabled className=\"mt-1\" />\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">ชื่อ-นามสกุล</Label>\n              <Input value={`${userData.firstName || ''} ${userData.lastName || ''}`.trim()} disabled className=\"mt-1\" />\n            </div>\n\n            {/* Editable fields */}\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">คำนำหน้า</Label>\n              {isEditing ? (\n                <Select\n                  value={profileData.title || userData.title || ''}\n                  onValueChange={(value) => setProfileData({...profileData, title: value as Title})}\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"เลือกคำนำหน้า\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value={Title.NAI}>{Title.NAI}</SelectItem>\n                    <SelectItem value={Title.NANG}>{Title.NANG}</SelectItem>\n                    <SelectItem value={Title.NANGSAO}>{Title.NANGSAO}</SelectItem>\n                  </SelectContent>\n                </Select>\n              ) : (\n                <Input value={userData.title || ''} disabled className=\"mt-1\" />\n              )}\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">ชื่อเล่น</Label>\n              {isEditing ? (\n                <Input\n                  value={profileData.nickname !== undefined ? profileData.nickname : userData.nickname || ''}\n                  onChange={(e) => setProfileData({...profileData, nickname: e.target.value})}\n                  className=\"mt-1\"\n                />\n              ) : (\n                <Input value={userData.nickname || ''} disabled className=\"mt-1\" />\n              )}\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">ตำแหน่ง</Label>\n              {isEditing ? (\n                <Input\n                  value={profileData.position !== undefined ? profileData.position : userData.position || ''}\n                  onChange={(e) => setProfileData({...profileData, position: e.target.value})}\n                  className=\"mt-1\"\n                />\n              ) : (\n                <Input value={userData.position || ''} disabled className=\"mt-1\" />\n              )}\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">เบอร์โทร</Label>\n              {isEditing ? (\n                <Input\n                  value={profileData.phone !== undefined ? profileData.phone : userData.phone || ''}\n                  onChange={(e) => setProfileData({...profileData, phone: e.target.value})}\n                  className=\"mt-1\"\n                />\n              ) : (\n                <Input value={userData.phone || ''} disabled className=\"mt-1\" />\n              )}\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">เพศ</Label>\n              {isEditing ? (\n                <Select\n                  value={profileData.gender !== undefined ? profileData.gender : userData.gender || ''}\n                  onValueChange={(value) => setProfileData({...profileData, gender: value as Gender})}\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"เลือกเพศ\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value={Gender.MALE}>ชาย</SelectItem>\n                    <SelectItem value={Gender.FEMALE}>หญิง</SelectItem>\n                  </SelectContent>\n                </Select>\n              ) : (\n                <Input value={userData.gender === Gender.MALE ? 'ชาย' : userData.gender === Gender.FEMALE ? 'หญิง' : ''} disabled className=\"mt-1\" />\n              )}\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">Line User ID</Label>\n              {isEditing ? (\n                <Input\n                  value={profileData.lineUserId !== undefined ? profileData.lineUserId : userData.lineUserId || ''}\n                  onChange={(e) => setProfileData({...profileData, lineUserId: e.target.value})}\n                  className=\"mt-1\"\n                  placeholder=\"เว้นว่างได้หากไม่มี\"\n                />\n              ) : (\n                <Input value={userData.lineUserId || ''} disabled className=\"mt-1\" />\n              )}\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">Social Media</Label>\n              {isEditing ? (\n                <Input\n                  value={profileData.socialMedia !== undefined ? profileData.socialMedia : userData.socialMedia || ''}\n                  onChange={(e) => setProfileData({...profileData, socialMedia: e.target.value})}\n                  className=\"mt-1\"\n                  placeholder=\"เว้นว่างได้หากไม่มี\"\n                />\n              ) : (\n                <Input value={userData.socialMedia || ''} disabled className=\"mt-1\" />\n              )}\n            </div>\n          </div>\n\n          <div>\n            <Label className=\"text-sm font-medium text-gray-700\">ที่อยู่</Label>\n            {isEditing ? (\n              <Textarea\n                value={profileData.address !== undefined ? profileData.address : userData.address || ''}\n                onChange={(e) => setProfileData({...profileData, address: e.target.value})}\n                className=\"mt-1\"\n                rows={3}\n                placeholder=\"เว้นว่างได้หากไม่มี\"\n              />\n            ) : (\n              <Textarea value={userData.address || ''} disabled className=\"mt-1\" rows={3} />\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":16122},"client/src/components/employee/ProfileModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useAuth } from '@/context/SimpleAuthContext';\nimport { usersAPI } from '@/services/api';\nimport { Gender } from '@/types';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const ProfileModal: React.FC<ProfileModalProps> = ({ isOpen, onClose }) => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [profileImageFile, setProfileImageFile] = useState<File | null>(null);\n  const [profileImagePreview, setProfileImagePreview] = useState<string>('');\n  const [formData, setFormData] = useState({\n    nickname: '',\n    address: '',\n    socialMedia: ''\n  });\n\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        nickname: user.nickname || '',\n        address: user.address || '',\n        socialMedia: user.socialMedia || ''\n      });\n    }\n  }, [user]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) return;\n\n    setIsLoading(true);\n\n    try {\n      let profilePictureUrl = user?.profilePicture || '';\n\n      // Handle image upload if a new file is selected\n      if (profileImageFile) {\n        profilePictureUrl = await convertFileToBase64(profileImageFile);\n      }\n\n      await usersAPI.update(user.id, {\n        nickname: formData.nickname,\n        address: formData.address,\n        socialMedia: formData.socialMedia,\n        profilePicture: profilePictureUrl,\n      });\n\n      toast({\n        title: \"อัปเดตโปรไฟล์สำเร็จ\",\n        description: \"ข้อมูลโปรไฟล์ของคุณถูกอัปเดตเรียบร้อยแล้ว\",\n      });\n\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"เกิดข้อผิดพลาด\",\n        description: \"ไม่สามารถอัปเดตโปรไฟล์ได้ กรุณาลองใหม่อีกครั้ง\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Validate file size (max 2MB to prevent base64 encoding issues)\n      if (file.size > 2 * 1024 * 1024) {\n        toast({\n          title: \"ไฟล์ใหญ่เกินไป\",\n          description: \"กรุณาเลือกไฟล์ที่มีขนาดไม่เกิน 2MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Validate file type\n      const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];\n      if (!validTypes.includes(file.type)) {\n        toast({\n          title: \"ประเภทไฟล์ไม่ถูกต้อง\",\n          description: \"กรุณาเลือกไฟล์ภาพในรูปแบบ JPG, PNG หรือ GIF\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setProfileImageFile(file);\n      \n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setProfileImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const convertFileToBase64 = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = error => reject(error);\n    });\n  };\n\n  const getAvatarColor = (gender: Gender) => {\n    return gender === Gender.MALE ? 'bg-indigo-500' : 'bg-sky-500';\n  };\n\n  if (!user) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-semibold text-gray-800\">\n            แก้ไขโปรไฟล์\n          </DialogTitle>\n          <DialogDescription>\n            แก้ไขข้อมูลโปรไฟล์ส่วนตัวของคุณ\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"text-center\">\n            {profileImagePreview ? (\n              <img \n                src={profileImagePreview} \n                alt=\"Preview\" \n                className=\"w-20 h-20 rounded-full object-cover border-4 border-gray-200 shadow-lg mx-auto mb-4\"\n              />\n            ) : user.profilePicture ? (\n              <img \n                src={user.profilePicture} \n                alt={user.nickname || user.firstName} \n                className=\"w-20 h-20 rounded-full object-cover border-4 border-gray-200 shadow-lg mx-auto mb-4\"\n              />\n            ) : (\n              <div className={`w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4 ${getAvatarColor(user.gender)} border-4 border-gray-200 shadow-lg`}>\n                <span className=\"text-white text-xl font-medium\">\n                  {user.nickname.charAt(0)}\n                </span>\n              </div>\n            )}\n            <input \n              type=\"file\" \n              accept=\"image/*\" \n              className=\"hidden\" \n              id=\"profileImage\"\n              onChange={handleImageChange}\n            />\n            <Label \n              htmlFor=\"profileImage\" \n              className=\"text-primary hover:text-primary/80 cursor-pointer text-sm font-medium\"\n            >\n              เปลี่ยนรูปโปรไฟล์\n            </Label>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"nickname\" className=\"text-sm font-medium text-gray-700 mb-2\">\n              ชื่อเล่น\n            </Label>\n            <Input\n              id=\"nickname\"\n              value={formData.nickname}\n              onChange={(e) => handleInputChange('nickname', e.target.value)}\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"address\" className=\"text-sm font-medium text-gray-700 mb-2\">\n              ที่อยู่\n            </Label>\n            <Textarea\n              id=\"address\"\n              rows={3}\n              value={formData.address}\n              onChange={(e) => handleInputChange('address', e.target.value)}\n              placeholder=\"ที่อยู่ปัจจุบัน\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"socialMedia\" className=\"text-sm font-medium text-gray-700 mb-2\">\n              โซเชียลมีเดีย\n            </Label>\n            <Input\n              id=\"socialMedia\"\n              type=\"url\"\n              value={formData.socialMedia}\n              onChange={(e) => handleInputChange('socialMedia', e.target.value)}\n              placeholder=\"https://facebook.com/username\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n            <Button \n              type=\"button\" \n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n            >\n              ยกเลิก\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"bg-primary hover:bg-primary/90\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'กำลังบันทึก...' : 'บันทึก'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":8205},"client/src/components/layout/Header.tsx":{"content":"import { useAuth } from '@/context/SimpleAuthContext';\nimport { UserRole, Gender } from '@/types';\nimport { useLocation } from 'wouter';\n\ninterface HeaderProps {\n  onProfileClick?: () => void;\n}\n\nexport const Header: React.FC<HeaderProps> = ({ onProfileClick }) => {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleLogout = () => {\n    logout();\n    setLocation('/');\n  };\n\n  const getAvatarColor = (gender: Gender) => {\n    return gender === Gender.MALE ? 'bg-indigo-500' : 'bg-sky-500';\n  };\n\n  const getInitials = (nickname: string) => {\n    return nickname.charAt(0);\n  };\n\n  const getTitle = () => {\n    if (!user) return '';\n    return user.role === UserRole.ADMIN ? 'ระบบจัดการการลา - ผู้ดูแลระบบ' : 'ระบบจัดการการลา';\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <img \n              src=\"https://in2it-service.com/IN2IT/logo/in2it-logo.png\" \n              alt=\"IN2IT\" \n              className=\"h-8 w-auto\"\n            />\n            <h1 className=\"ml-4 text-xl font-semibold text-gray-800\">\n              {getTitle()}\n            </h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              {user?.profilePicture ? (\n                <img \n                  src={user.profilePicture} \n                  alt={user.nickname || user.firstName || ''} \n                  className=\"w-8 h-8 rounded-full object-cover border-2 border-white shadow-sm\"\n                />\n              ) : (\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${getAvatarColor(user?.gender || Gender.MALE)} border-2 border-gray-200 shadow-sm`}>\n                  <span className=\"text-white text-sm font-medium\">\n                    {getInitials(user?.nickname || '')}\n                  </span>\n                </div>\n              )}\n              <span className=\"text-gray-700 font-medium\">\n                {user?.nickname || ''}\n              </span>\n            </div>\n            \n            {user?.role === UserRole.EMPLOYEE && onProfileClick && (\n              <button \n                onClick={onProfileClick}\n                className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n              >\n                <i className=\"fas fa-cog\"></i>\n              </button>\n            )}\n            \n            <button \n              onClick={handleLogout}\n              className=\"text-gray-500 hover:text-gray-700 transition-colors\"\n            >\n              <i className=\"fas fa-sign-out-alt\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n","size_bytes":2965},"client/src/components/shared/CalendarView.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Calendar, dateFnsLocalizer, Views, View } from 'react-big-calendar';\nimport { format, parse, startOfWeek, getDay } from 'date-fns';\nimport { th } from 'date-fns/locale';\nimport { LeaveRequest, LeaveStatus } from '@/types';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nconst localizer = dateFnsLocalizer({\n  format,\n  parse,\n  startOfWeek,\n  getDay,\n  locales: {\n    th: th,\n  },\n});\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  start: Date;\n  end: Date;\n  resource: LeaveRequest;\n  status: LeaveStatus;\n}\n\ninterface CalendarViewProps {\n  leaveRequests: LeaveRequest[];\n  isAdmin?: boolean;\n  onEventClick?: (event: CalendarEvent) => void;\n}\n\nexport const CalendarView: React.FC<CalendarViewProps> = ({ \n  leaveRequests, \n  isAdmin = false, \n  onEventClick \n}) => {\n  const [view, setView] = useState<View>(Views.MONTH);\n  const [date, setDate] = useState(new Date());\n  const [statusFilter, setStatusFilter] = useState<'all' | LeaveStatus>('all');\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n\n  useEffect(() => {\n    const filteredRequests = statusFilter === 'all' \n      ? leaveRequests \n      : leaveRequests.filter(req => req.status === statusFilter);\n\n    const calendarEvents: CalendarEvent[] = filteredRequests.map(request => ({\n      id: request.id,\n      title: isAdmin \n        ? `${request.employeeName} - ${request.leaveType}`\n        : request.leaveType,\n      start: new Date(request.startDate),\n      end: new Date(request.endDate),\n      resource: request,\n      status: request.status as LeaveStatus,\n    }));\n\n    setEvents(calendarEvents);\n  }, [leaveRequests, statusFilter, isAdmin]);\n\n  const handleSelectEvent = (event: CalendarEvent) => {\n    if (onEventClick) {\n      onEventClick(event);\n    }\n  };\n\n  const handleNavigate = (newDate: Date) => {\n    setDate(newDate);\n  };\n\n  const handleViewChange = (newView: View) => {\n    setView(newView);\n  };\n\n  const eventStyleGetter = (event: CalendarEvent) => {\n    let backgroundColor = '#3174ad';\n    let color = 'white';\n    \n    switch (event.status) {\n      case LeaveStatus.PENDING:\n        backgroundColor = '#f59e0b';\n        break;\n      case LeaveStatus.APPROVED:\n        backgroundColor = '#10b981';\n        break;\n      case LeaveStatus.REJECTED:\n        backgroundColor = '#ef4444';\n        break;\n      default:\n        backgroundColor = '#6b7280';\n    }\n\n    return {\n      style: {\n        backgroundColor,\n        color,\n        border: 'none',\n        borderRadius: '4px',\n        fontSize: '12px',\n        padding: '2px 4px',\n      }\n    };\n  };\n\n  const messages = {\n    allDay: 'ทั้งวัน',\n    previous: 'ก่อนหน้า',\n    next: 'ถัดไป',\n    today: 'วันนี้',\n    month: 'เดือน',\n    week: 'สัปดาห์',\n    day: 'วัน',\n    agenda: 'กำหนดการ',\n    date: 'วันที่',\n    time: 'เวลา',\n    event: 'กิจกรรม',\n    noEventsInRange: 'ไม่มีการลาในช่วงนี้',\n    showMore: (total: number) => `+ อีก ${total} รายการ`,\n  };\n\n  const formats = {\n    monthHeaderFormat: 'MMMM yyyy',\n    dayHeaderFormat: 'dd/MM/yyyy',\n    dayRangeHeaderFormat: ({ start, end }: { start: Date; end: Date }) =>\n      `${format(start, 'dd/MM/yyyy')} - ${format(end, 'dd/MM/yyyy')}`,\n    agendaHeaderFormat: ({ start, end }: { start: Date; end: Date }) =>\n      `${format(start, 'dd/MM/yyyy')} - ${format(end, 'dd/MM/yyyy')}`,\n  };\n\n  return (\n    <Card className=\"shadow-sm\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl font-semibold text-gray-800\">\n            ปฏิทินการลา\n          </CardTitle>\n          <div className=\"flex items-center space-x-4\">\n            <Select value={statusFilter} onValueChange={(value) => setStatusFilter(value as any)}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"สถานะ\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">ทั้งหมด</SelectItem>\n                <SelectItem value={LeaveStatus.PENDING}>รอพิจารณา</SelectItem>\n                <SelectItem value={LeaveStatus.APPROVED}>อนุมัติ</SelectItem>\n                <SelectItem value={LeaveStatus.REJECTED}>ปฏิเสธ</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-4 flex flex-wrap gap-2\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-amber-500 rounded\"></div>\n            <span className=\"text-sm text-gray-600\">รอพิจารณา</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n            <span className=\"text-sm text-gray-600\">อนุมัติ</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\n            <span className=\"text-sm text-gray-600\">ปฏิเสธ</span>\n          </div>\n        </div>\n        \n        <div style={{ height: '600px' }}>\n          <Calendar\n            localizer={localizer}\n            events={events}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            view={view}\n            date={date}\n            onNavigate={handleNavigate}\n            onView={handleViewChange}\n            onSelectEvent={handleSelectEvent}\n            eventPropGetter={eventStyleGetter}\n            messages={messages}\n            formats={formats}\n            culture=\"th\"\n            style={{ height: '100%' }}\n            popup\n            showMultiDayTimes\n            step={60}\n            timeslots={1}\n            defaultView={Views.MONTH}\n            views={[Views.MONTH, Views.WEEK, Views.DAY, Views.AGENDA]}\n            toolbar={true}\n            components={{\n              event: ({ event }) => (\n                <div className=\"text-xs font-medium truncate\">\n                  {event.title}\n                </div>\n              ),\n            }}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":6694},"client/src/components/shared/LeaveRequestModal.tsx":{"content":"import { LeaveRequest, LeaveStatus } from '@/types';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { formatDateThai } from '@/utils/dateHelpers';\nimport { generatePrintableLeaveForm } from '@/utils/pdfGenerator';\nimport { leaveRequestsAPI } from '@/services/api';\n\ninterface LeaveRequestModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  request: LeaveRequest | null;\n  employee?: any;\n  showActions?: boolean;\n  onApprove?: (id: string) => void;\n  onReject?: (id: string) => void;\n  onDelete?: (id: string) => void;\n}\n\nexport const LeaveRequestModal: React.FC<LeaveRequestModalProps> = ({\n  isOpen,\n  onClose,\n  request,\n  employee,\n  showActions = false,\n  onApprove,\n  onReject,\n  onDelete\n}) => {\n  if (!request) return null;\n\n  const getStatusBadge = (status: LeaveStatus) => {\n    switch (status) {\n      case LeaveStatus.PENDING:\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">รอพิจารณา</Badge>;\n      case LeaveStatus.APPROVED:\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">อนุมัติ</Badge>;\n      case LeaveStatus.REJECTED:\n        return <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">ปฏิเสธ</Badge>;\n      default:\n        return <Badge variant=\"secondary\">ไม่ทราบสถานะ</Badge>;\n    }\n  };\n\n  const handlePrint = () => {\n    if (employee) {\n      generatePrintableLeaveForm(request, employee);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl !bg-white !border !border-gray-200 !shadow-lg dialog-content\" style={{ backgroundColor: 'white', color: '#1f2937' }}>\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-gray-900\">\n            รายละเอียดการลา\n          </DialogTitle>\n          <DialogDescription className=\"text-sm text-gray-600\">\n            ข้อมูลรายละเอียดของการขอลา\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 text-gray-900\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">ชื่อผู้ขอลา</label>\n              <p className=\"text-gray-900\">{request.employeeName}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">ประเภทการลา</label>\n              <p className=\"text-gray-900\">{request.leaveType}</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">วันที่เริ่มลา</label>\n              <p className=\"text-gray-900\">{formatDateThai(request.startDate)}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">วันที่สิ้นสุดลา</label>\n              <p className=\"text-gray-900\">{formatDateThai(request.endDate)}</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">จำนวนวัน</label>\n              <p className=\"text-gray-900\">{request.totalDays} วัน</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">สถานะ</label>\n              <div>{getStatusBadge(request.status as LeaveStatus)}</div>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">เหตุผลการลา</label>\n            <p className=\"text-gray-900 bg-gray-50 p-3 rounded-md\">{request.reason}</p>\n          </div>\n\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">เบอร์โทรติดต่อ</label>\n            <p className=\"text-gray-900\">{request.contactNumber}</p>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">วันที่ยื่นคำขอ</label>\n              <p className=\"text-gray-900\">{formatDateThai(request.requestDate)}</p>\n            </div>\n            {request.approvedDate && (\n              <div>\n                <label className=\"text-sm font-medium text-gray-700\">วันที่อนุมัติ</label>\n                <p className=\"text-gray-900\">{formatDateThai(request.approvedDate)}</p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex justify-between pt-4 border-t\">\n            <div className=\"space-x-2\">\n              {request.status === LeaveStatus.APPROVED && employee && (\n                <Button\n                  variant=\"outline\"\n                  onClick={handlePrint}\n                  className=\"text-blue-600 hover:text-blue-800\"\n                >\n                  <i className=\"fas fa-print mr-2\"></i>\n                  พิมพ์ใบลา\n                </Button>\n              )}\n            </div>\n            \n            {showActions && (\n              <div className=\"space-x-2\">\n                {request.status === LeaveStatus.PENDING && (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      onClick={async () => {\n                        try {\n                          await leaveRequestsAPI.update(request.id, {\n                            status: LeaveStatus.REJECTED,\n                            approvedDate: new Date()\n                          });\n                          onReject?.(request.id);\n                        } catch (error) {\n                          console.error('Error rejecting request:', error);\n                        }\n                      }}\n                      className=\"text-red-600 hover:text-red-800\"\n                    >\n                      ปฏิเสธ\n                    </Button>\n                    <Button\n                      onClick={async () => {\n                        try {\n                          await leaveRequestsAPI.update(request.id, {\n                            status: LeaveStatus.APPROVED,\n                            approvedDate: new Date()\n                          });\n                          onApprove?.(request.id);\n                        } catch (error) {\n                          console.error('Error approving request:', error);\n                        }\n                      }}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      อนุมัติ\n                    </Button>\n                  </>\n                )}\n                {(request.status === LeaveStatus.PENDING || request.status === LeaveStatus.REJECTED) && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => onDelete?.(request.id)}\n                    className=\"text-red-600 hover:text-red-800\"\n                  >\n                    <i className=\"fas fa-trash mr-2\"></i>\n                    ลบ\n                  </Button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":7610},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport const Loading: React.FC<LoadingProps> = ({ className, size = \"md\" }) => {\n  const sizeClasses = {\n    sm: \"h-4 w-4\",\n    md: \"h-8 w-8\", \n    lg: \"h-12 w-12\"\n  };\n\n  return (\n    <div className={cn(\"flex items-center justify-center\", className)}>\n      <div className={cn(\n        \"animate-spin rounded-full border-2 border-gray-300 border-t-primary\",\n        sizeClasses[size]\n      )} />\n    </div>\n  );\n};","size_bytes":528},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 ring-offset-background data-[placeholder]:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-white text-gray-900 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin] select-content\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none hover:bg-blue-500 hover:text-white focus:bg-blue-500 focus:text-white data-[highlighted]:bg-blue-500 data-[highlighted]:text-white data-[disabled]:pointer-events-none data-[disabled]:opacity-50 select-item bg-white text-gray-900\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5874},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-600\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-blue-500 data-[state=active]:text-white data-[state=active]:shadow-md hover:bg-blue-50 hover:text-blue-700\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1907},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}